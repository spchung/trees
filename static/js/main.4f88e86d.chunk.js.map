{"version":3,"sources":["libs/treeUtils.js","components/Slider.js","components/Canvas.js","components/Checkbox.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TREEROOT","SPNAMES","spaceFactor","heightFactor","space","maxHeight","scaleBar","Node","data","left","right","father","this","height","theta","index","circle","Circle","Indexer","assign","node","id","x","y","NewSpeciesOrder","treeList","ExtractSpeciesOrder","tNode","newickSt","currNode","push","tallestTreeScale","useCladogram","maxNameLength","circles","getMaxHeight","noTr","treeVec","h1","getTreeHeight","tree","Newtree","replace","p","newick","match","blsum","Number","j","k","length","makeEdge","z","context","lineWidth","lineJoin","beginPath","moveTo","lineTo","stroke","printNames","nameArray","currX","cY","i","textAlign","textBaseline","save","translate","rotate","Math","PI","fillText","restore","postOrder","brLng","printTheta","drawRootTheta","drawOneTree","value","canvas","hF","treeFromNewick","width","initX","toPrecision","font","newickString","brLen","ctx","orderTag","getMaxLenSN","n","current","cumY","pos","order","parseFloat","max","sN","mLen","iD","measureText","branchTip","X","Y","message","clado","console","log","displayIndex","indexer","EnumerateTree","DrawIndex","drawIndexToCanvas","createCircle","radius","MaxNameLen","arc","fillStyle","fill","strokeStyle","swapNodes","nodeId","Swap","InputNodeID","temp","redrawCurrentTree","SliderHeader","styled","div","StyledSlider","StyledThumb","getPercentage","getLeft","percentage","Slider","initial","onChange","initialPercentage","sliderRef","React","useRef","thumbRef","currentRef","diff","handleMouseMove","event","newX","clientX","getBoundingClientRect","end","offsetWidth","newPercentage","newValue","getValue","style","round","textContent","handleMouseUp","document","removeEventListener","ref","onMouseDown","addEventListener","TreeUtils","require","Canvas","props","IntersectWithCircle","pow","init","state","pop","utils","currentTree","Cladogram","RelScaling","onWindowResize","window","innerWidth","innerHeight","clearRect","DisplayIndex","runDisplayIndex","slideToNextTree","toggleIndexDisplay","swapCount","showSwapInstructions","relscale","saveAsPDF","imgData","toDataURL","pdf","jsPDF","addImage","receivedData","received","trees","relscal","updateMe","refs","getContext","e","offsetLeft","clientY","offsetTop","forEach","formatFn","number","toFixed","className","onClick","refresh","Component","Checkbox","type","text","checked","Home","handleUpload","ev","File","FileReader","FileList","Blob","reader","file","querySelector","files","scope","onload","varifyInputFile","target","result","split","setState","uploaded","currLen","past","forceUpdate","CurrFile","readAsText","alert","handleRefresh","a","async","logDiffLength","handleRelScalingChange","AbsScaling","handleCladogramChange","handleAbsScaling","inputVect","returnString","badInput","string","currFileLength","previousFileLen","marginLeft","marginTop","marginRight","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f88e86d.chunk.js","sourcesContent":["/* eslint-disable no-lone-blocks */\nfunction TreeUtils(){\n    // var treeString=\"empty\";\n    var TREEROOT;\n    var SPNAMES=[];\n    var initX=40;\n    var initY=15; \n    // var scaleFactor=50;\n    var spaceFactor=50\n    var heightFactor=100;\n    // var heightToSpaceFactor=1;\n    var space=0;\n    // var treeVec = [];\n    // var aString=\"\";\n    // var treePos=\"\";\n    var maxHeight=0; \n    // var value=0;\n    var scaleBar=0.0;\n\n    this.tallestTreeScale=false;\n    this.useCladogram=false;\n    this.maxNameLength=0; \n    this.circles=[];\n\n\n    /////////////////// ORIGINAL ////////////////\n    function Node(data, left, right, father){\n        this.data = data;\n        this.left = left;\n        this.right = right;\n        this.father = father;\n        this.space = 0;\n        this.height = 0; \n        this.theta = 0;\n        this.index = -99;\n        this.circle = new Circle();\n        // this.show = show;\n    }\n\n    this.getMaxHeight = (noTr, treeVec) => {\n        maxHeight=0;\n        for(let y=0; y<noTr; y++){\n            let h1 = this.getTreeHeight(treeVec[y]);\n            if(h1 > maxHeight){\n                maxHeight = h1;\n            }\n        }\n    }\n\n    this.getTreeHeight = (tree) => {\n        // strip all thetas out of tree\n        var Newtree = tree.replace(/(#\\d.\\d+)([eE](\\+|-)?[0-9]+)?/g,\"\");\n        // count opening parenthese until first tip taxa is encountered\n        var p=0;\n        while(Newtree[p]===\"(\"){\n            p++;\n        }\n        // strip all leading \"(\"s out of tree\n        Newtree = Newtree.replace(/\\(+/,\"\");\n        // put elements of tree into a vector\n        var newick=Newtree.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(,)/g); // ([eE][-+]?[0-9]+)?) /g);\n        // get tree height\n        var blsum=0;\n        blsum += Number(newick[1]); \n        var j=0;\n        for(var k=2; k<newick.length; k++){\n            if(newick[k]===\"(\"){\n                j++;\n            }\n            else if ((newick[k]===\")\")&&(j===0)&&(p>1)) {\n                blsum += Number(newick[k+1]); p--;\n            }\n            else if ((newick[k]===\")\")&&(j>0)) {\n                j--;\n            }\n        }\n        return blsum;\n    }\n\n    this.makeEdge = (x,y,z,context) => {\n        context.lineWidth = 3;\n        context.lineJoin = 'round';\n        context.beginPath();\n        context.moveTo(x,y);\n        context.lineTo(x,z);\n        context.stroke();\n    }\n\n    this.printNames = (nameArray, context) => {\n        let currX=initX+spaceFactor;\n        let cY=initY+this.maxNameLength -12;\n\n        for (let i=0; i<nameArray.length;i++){\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            context.translate(currX,cY);\n            context.rotate(Math.PI*(3/2));\t\n            context.fillText(nameArray[i],0,0);\n            context.restore();\n\t        currX+=spaceFactor;\n        }\n    } \n\n    this.postOrder = (node,context,brLng) => {\n        if (!brLng){ // is a cladogram with no branch lengths\n            if(node === null){\n                return; \n            }\n            if(node.left !== null){\n                // console.log(\"going left\");\n                this.postOrder(node.left, context, false);\n            }\n            if(node.right !== null){\n                // console.log(\"goin right\");\n                this.postOrder(node.right, context, false);\n            } \n            if((node.left == null)&&(node.right == null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                this.printTheta( node.space+initX, node.height*heightFactor+initY+this.maxNameLength, node, context );\n                this.makeEdge(node.space+initX, node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n            }\n            else {\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                if(node.father != null){\n                    this.printTheta(node.space+initX,node.height*heightFactor+initY+this.maxNameLength, node, context)\n                    this.makeEdge(node.space+initX,node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else{\n                    this.drawRootTheta(node, context, node.theta, true);\n                }\n            }\n        }\n        else if(brLng){\n            if(node === null){\n                return;\n            }\n            if(node.left != null){\n                this.postOrder(node.left, context, true);\n            }\n            if(node.right != null){\n                this.postOrder(node.right, context, true);\n            }\n            if((node.left === null)&&(node.right === null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                this.printTheta( node.space+initX, initY+this.maxNameLength, node, context, true);\n                this.makeEdge( node.space+initX, initY+this.maxNameLength, node.height*heightFactor+initY+this.maxNameLength, context);\n            }\n            else {\n                // non-tip nodes\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                // horizontal lines\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                if(node.father != null){\n                    this.printTheta(node.space+initX, node.right.height*heightFactor+initY+this.maxNameLength, node, context );\n                    this.makeEdge(node.space+initX,node.right.height*heightFactor+initY+this.maxNameLength,node.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else{\n                    this.drawRootTheta(node, context, node.theta, false);\n                }\n            }\n        }\n    }\n\n    this.drawOneTree = (value,treeVec,useCladogram,canvas,context,tallestTreeScale,hF) => {   \n        if(value < treeVec.length){\n            // 1 - make tree structure from input text \n            if(!useCladogram){\n                this.treeFromNewick(treeVec[value],true, context);\n            }\n            else{\n                this.treeFromNewick(treeVec[value],false, context);\n            }\n        \n            // 2 \n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(SPNAMES,context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n\n    this.treeFromNewick = (newickString,brLen,ctx) => {\n        var orderTag = 0;\n        if(!brLen){\n            let height = newickString.match(/(,)/g).length;\n            // overwrite input string \n            newickString = newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            SPNAMES = newickString.match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            let newick = newickString.match(/([A-Za-z]+)|(\\()|(\\))|(,)|([#]\\d+\\.\\d+)/g);\n\n            let n = new Node(\"root\", null, null, null);\n            n.height = height\n            TREEROOT = n;\n            let current = TREEROOT;\n            current.height=0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                            current.left = n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                            current = current.father;\n                            current.right=n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \")\":\n                        // back\n                            current = current.father;\n                            current.height=Math.max(current.right.height,current.left.height)+1;\n                        break;\n                    default:\n                        if(newick[pos].match(/([#]\\d+\\.\\d+)/g)){\n                            current.theta = newick[pos];\n                            current.order = orderTag;\n                        }\n                        else{\n                            current.data = newick[pos];\n                            current.height = 0;\n                        }\n                        break;\n                    }\n                orderTag+=1;\n\t        }\n\t        TREEROOT.height=Math.max(current.right.height,current.left.height)+1;\n        }\n        else if(brLen){\n            SPNAMES = newickString.replace(/(#\\d+\\.\\d+)|(\\d+\\.\\d+)/g,\"\").replace(/e-\\d+/g,\"\").replace(/:/g,\"\").match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            newickString=newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            let newick=newickString.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(,)|([#]\\d+\\.\\d+)/g); \n            let n = new Node(\"root\", null, null, null, null, null, null);\n            TREEROOT = n;\n            let current = TREEROOT;\n            let cumY=0.0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null, null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                        current.left = n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                        current = current.father;\n                        current.right=n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \")\":\n                        // back\n                        cumY = current.height;\n                        current = current.father;\n                        break;\n                    case \";\":\n                        // at end\n                        break;\n                    default:\n                        current.order = orderTag;\n                        if( (newick[pos].match(/(\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?/) !=null) && (newick[pos].match(/([#]\\d+\\.\\d+)/) == null) ) {\n                            current.height = parseFloat(newick[pos])+cumY;\n                        }\n                        else if(newick[pos].match(/([#]\\d+\\.\\d+)/)){\n                            current.theta = newick[pos];\n                        }\n                        else{\n                            current.data = newick[pos];\n                            cumY=0.0;\n                        }\n                        break;\n                }\n            }    \n        }\n    }\n\n    this.getMaxLenSN = (sN, context) => {\n        let mLen = 0;\n        let iD = 0;\n\n        for(let i=0; i<sN.length; i++){\n            if(sN[i].length > mLen){\n                mLen = sN[i].length;\n                iD = i;\n            }\n            context.font = \"italic bold 16px serif\";\n            this.maxNameLength=context.measureText(sN[iD]).width;\n        }\n    }\n\n    ////////////// ADD ONS ///////////////\n    this.printTheta = (x,y,node,context,branchTip) =>{\n        if(node && node.theta){\n            // console.log(node.order)\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            let X = x-70;\n            let Y = y+15;\n            context.translate(X, Y);\n            let message = node.theta.replace(/[#]/,\"\");\n            context.fillText(message,0,0);\n            context.restore();\n        }\n    } \n\n    this.drawRootTheta = (node, context, message, clado) => {\n        if(message){\n            if(!clado){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+this.maxNameLength;\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore();\n            }\n            else{\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.height*heightFactor+initY+this.maxNameLength\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore()\n            }\n        }\n        else{\n            console.log(\"bad\");\n        }\n    }\n\n    this.displayIndex = (brLen, context) =>{\n        if(this.circles.length === 0){\n            if(TREEROOT){\n                var indexer = new Indexer();\n                EnumerateTree(TREEROOT,indexer);\n                this.DrawIndex(TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n        else{\n            if(TREEROOT){\n                this.circles =[];\n                this.DrawIndex(TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n    }\n\n    this.DrawIndex = (node, brLen, context, maxNameLength) => {\n        if(node === null){\n            return;\n        }\n        if((node.left !== null) && (node.right!==null)){\n            if(brLen){\n                this.drawIndexToCanvas( node.space+initX, node.right.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }else{\n                this.drawIndexToCanvas( node.space+initX, node.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }\n        }\n        if(node.left !== null){ \n            this.DrawIndex(node.left, brLen, context, maxNameLength);\n        }\n        if(node.right !== null){\n            this.DrawIndex(node.right, brLen, context, maxNameLength);\n        }\n    }\n\n    this.createCircle = (x, y, radius, id) => {\n        this.circles.push({x: x, y: y, radius: radius, id: id});\n    }\n\n    this.drawIndexToCanvas = (x, y, MaxNameLen ,node, context, brLen) => {\n        var radius = 15;\n        if(node.father === null){\n            if(brLen){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+MaxNameLen;\n                \n                context.save();\n                context.beginPath();\n                this.createCircle(x, y, radius, node.index);\n                context.arc(x, y, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n\n                context.translate(x-4, y);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n            else{\n                let x = (node.left.space+node.right.space)/2+initX-50;\n                let y = node.height*heightFactor+initY+MaxNameLen+10\n\n                context.save();\n                context.beginPath();\n                this.createCircle(x, y, radius, node.index);\n                context.arc(x, y, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n\n                context.translate(x-4, y);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n        }\n        else{\n            context.textAlign='start';\n            context.textBaseline='middle';\n            \n            context.save();\n            context.beginPath();\n            this.createCircle(x, y+30, radius, node.index);\n            context.arc(x, y+30, radius, 0, 2*Math.PI, false);\n            context.fillStyle = '#4a4a4a';\n            context.fill();\n            context.lineWidth = 3;\n            context.strokeStyle = '#000000';\n            context.stroke();\n\n            context.translate(x-4, y+30);\n            context.fillStyle = '#ffffff';\n            context.fillText(node.index, 0, 0);\n            context.restore();\n        }\n    }\n\n    this.swapNodes = (nodeId, useCladogram, canvas, context, tallestTreeScale, hF) => {\n        if(TREEROOT){\n            Swap(TREEROOT,nodeId);\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            // if(value==0)\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(NewSpeciesOrder(TREEROOT), context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n    \n    this.redrawCurrentTree = (useCladogram, canvas, context, tallestTreeScale, hF) => {\n        if(TREEROOT){\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.font = \"italic bold 16px serif\";\n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(NewSpeciesOrder(TREEROOT), context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n\n    function Indexer(){\n        this.index = 0;\n        this.assign = (node) =>{\n            node.index = this.index;\n            node.circle.id = this.index;\n            this.index++;\n        }\n    }\n\n    function Circle(){\n        this.id = 0;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    function ExtractSpeciesOrder(tNode, newickSt){\n        // Call after altering a tree \n        // Recursively traverse tree to get new Species name order\n        if(tNode === null){\n            return;\n        }\n        var currNode = tNode;\n        if(currNode.left !== null){\n            ExtractSpeciesOrder(currNode.left, newickSt);\n        }\n        if(currNode.right !== null){\n            ExtractSpeciesOrder(currNode.right, newickSt);\n        }\n        if((currNode.left === null) && (currNode.right === null)){\n            newickSt.push(tNode.data);\n        }\n    }\n\n    function EnumerateTree(node,indexer){\n        if(node === null){\n            return;\n        }\n        if((node.left !== null)&& (node.right!==null)){\n            indexer.assign(node);\n        }\n\n        if(node.left !== null){\n            EnumerateTree(node.left, indexer);\n        }\n        \n        if(node.right !== null){\n            EnumerateTree(node.right, indexer)\n        }\n    }\n\n    function Swap(node,InputNodeID){\n        if(node === null){\n            return;\n        }\n        if(node.index === InputNodeID){\n            if(node.left && node.right){\n                let temp = node.left;\n                node.left = node.right;\n                node.right = temp;\n            }\n        }\n        if(node.left !== null){\n            Swap(node.left, InputNodeID);\n        }\n        if(node.right !== null){ \n            Swap(node.right, InputNodeID);\n        }\n    }\n\n    function NewSpeciesOrder(node){\n        var treeList =[]\n        ExtractSpeciesOrder(node,treeList);\n        return treeList;\n    }\n}\n    \nmodule.exports = TreeUtils;","import React from 'react';\nimport styled from 'styled-components';\n\nconst SliderHeader = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst StyledSlider = styled.div`\n  position: relative;\n  border-radius: 3px;\n  background: #dddddd;\n  height: 15px;\n`;\n\nconst StyledThumb = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 3px;\n  position: relative;\n  top: -3px;\n  opacity: 0.5;\n  background: #33ff99;\n  cursor: pointer;\n`;\n\n// SORECE : https://www.robinwieruch.de/react-slider \n\nconst getPercentage = (current, max) => (100 * current) / max;\n\nconst getValue = (percentage, max) => (max / 100) * percentage;\n\nconst getLeft = (percentage) => `calc(${percentage}% - 5px)`;\n\nconst Slider = ({\n  initial,\n  max,\n  onChange,\n}) => {\n\n  const initialPercentage = getPercentage(initial, max);\n\n  const sliderRef = React.useRef();\n  const thumbRef = React.useRef();\n  const currentRef = React.useRef();\n\n  const diff = React.useRef(null);\n\n  const handleMouseMove = event => {\n    let newX =\n      event.clientX -\n      diff.current -\n      sliderRef.current.getBoundingClientRect().left;\n\n    const end =\n      sliderRef.current.offsetWidth - thumbRef.current.offsetWidth;\n\n    const start = 0;\n\n    if (newX < start) {\n      newX = 0;\n    }\n\n    if (newX > end) {\n      newX = end;\n    }\n\n    const newPercentage = getPercentage(newX, end);\n    const newValue = getValue(newPercentage, max);\n\n    thumbRef.current.style.left = getLeft(Math.round(newPercentage));\n    currentRef.current.textContent = Math.round(newValue);\n\n    onChange(newValue);\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener('mouseup', handleMouseUp);\n    document.removeEventListener('mousemove', handleMouseMove);\n  };\n\n  const handleMouseDown = event => {\n    diff.current =\n      event.clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  return (\n    <>\n      <SliderHeader>\n        <strong ref={currentRef}>{initial}</strong>\n        &nbsp;/&nbsp;\n        {max}\n      </SliderHeader>\n      <StyledSlider ref={sliderRef}>\n        <StyledThumb\n          style={{ left: getLeft(initialPercentage) }}\n          ref={thumbRef}\n          onMouseDown={handleMouseDown}\n        />\n      </StyledSlider>\n    </>\n  );\n};\n\nexport default Slider;","import React from 'react'\nimport Slider from './Slider';\nimport jsPDF from 'jspdf';\n// import TreeUtils from '../libs/treeUtils'\n\nvar TreeUtils = require('../libs/treeUtils');\n\nclass Canvas extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            receivedData : this.props.received,\n            treeVec : this.props.trees,\n            tallestTreeScale : false,\n            useCladogram : false,\n            maxNameLength : 0,\n            RelScaling : this.props.relscal,\n            Cladogram : this.props.clado,\n            updateMe: true\n        };\n        this.currentTree = 0;\n        this.utils = new TreeUtils(); // make a global \n        this.DisplayIndex = false;\n        this.swapCount=0;\n    }\n    // update local state from props changes \n    static getDerivedStateFromProps(props, state) {\n        return {\n            receivedData: props.received, \n            treeVec : props.trees, // already split by \"/n\"\n            RelScaling : props.relscal,\n            Cladogram : props.clado,\n        };\n    }\n\n    componentDidMount(){\n        this.canvas = this.refs.canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.ctx.save();\n        this.ctx.font =\"italic 25px serif\";\n        this.ctx.fillText(\"Please select input file\", (this.canvas.width-350)/2 , this.canvas.height/2);\n        this.ctx.restore();\n        // resize\n        window.addEventListener('resize', this.onWindowResize, false); \n\n        // window \n        this.canvas.addEventListener('click', (e)=> {\n            if(this.utils.circles.length > 0){\n                const pos = {\n                    x: e.clientX-this.ctx.canvas.offsetLeft,\n                    y: e.clientY-this.ctx.canvas.offsetTop\n                }\n                this.utils.circles.forEach( circle => {\n                    if(this.IntersectWithCircle(pos, circle)){\n                        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n                        this.utils.swapNodes(circle.id, this.state.Cladogram, this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n                        if(this.DisplayIndex){\n                            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n                        }\n                    }\n                });\n            }\n        });\n        // get init state for utils global scale \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n\n    }\n\n    IntersectWithCircle = (pos, circle) => {\n        return Math.pow(pos.x-circle.x,2)+Math.pow(pos.y-circle.y,2) < Math.pow(circle.radius,2); \n    }\n    \n    // called everytime there is a change to state -> triggered by getDerivedStates -> triggered by any relative prop changes\n    componentDidUpdate(){\n        if(this.state.receivedData === true){\n            this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n            this.init();\n        }\n\n        if(this.DisplayIndex){\n            this.DisplayIndex = !this.DisplayIndex;\n            this.utils.circles =[];\n        }\n\n        // update utils gloabl vars -> maybe there is a ore elegant way to do this \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n    }\n\n    // Will only be called when we receive new data \n    init = () => {\n        if(this.state.treeVec[this.state.treeVec.length-2].match(\";\") === null){\n            this.treeVec.pop();\n        }\n        // Draw first tree  \n        let noTr = this.state.treeVec.length-2;\n        this.utils.getMaxHeight(noTr, this.state.treeVec);\n        this.utils.drawOneTree(this.currentTree,this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    onWindowResize = () => {\n        this.ctx.canvas.width = window.innerWidth;\n        this.ctx.canvas.height = window.innerHeight*0.8;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        // need function to redraw tree instead\n        this.utils.redrawCurrentTree(this.state.Cladogram,this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n        }\n    }\n    // NOTE: hF = this.ctx.height*0.9-this.maxNameLength\n    slideToNextTree = (i) => {\n        this.DisplayIndex = false;\n        let index = Math.round(i);\n        this.currentTree = index;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        this.utils.drawOneTree(index, this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    toggleIndexDisplay = () => {\n        this.swapCount=0;\n        this.utils.circles = [];\n        this.DisplayIndex = !this.DisplayIndex;\n        // this.setState({updateMe:true});\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        // this.utils.drawOneTree(this.currentTree,this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        this.utils.redrawCurrentTree(this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n            this.showSwapInstructions(this.ctx);\n        }\n    }\n\n    showSwapInstructions = (context) => {\n        if(this.utils.circles.length > 0){\n            context.save();\n            context.translate(0,650);\n            context.fillText(\"Instruction:\\nClick on any node bubbles\\non the screen to swap its associated branches \",0,0);\n            context.restore();\n        }\n    }\n\n    runDisplayIndex = (clado, relscale, context) => {\n        //only show instructions for the first three swaps\n        if(this.swapCount <3){\n            this.showSwapInstructions(this.ctx);\n        }\n        if(clado){\n            this.utils.displayIndex(false, context);\n        }\n        else if(relscale){\n            this.utils.displayIndex(true, context);\n        }\n        else{\n            this.utils.displayIndex(true, context);\n        }\n        this.swapCount++;\n    }\n\n    saveAsPDF = () => {\n        // clear node circles from canvas \n        if(this.DisplayIndex){\n            this.toggleIndexDisplay();\n        }\n        var imgData = this.canvas.toDataURL();\n        var pdf = new jsPDF();\n        pdf.addImage(imgData, 'JPEG', 10, -145, 300, 150, null, null, -90);\n        pdf.save(\"download.pdf\");\n    }\n\n    render(){\n        return(\n            <div>\n                <canvas ref=\"canvas\" width={window.innerWidth} height={(window.innerHeight*0.8)} />\n                <Slider\n                    initial={0}\n                    max={this.state.treeVec.length} // use length of vector \n                    formatFn={number => number.toFixed(2)}\n                    onChange={value => this.slideToNextTree(value)} // round value to get index for treeVect\n                />\n                <div className=\"display-save-group\">\n                    <button className=\"display-btn\" onClick={this.toggleIndexDisplay}>Swap Nodes</button>\n                    &nbsp;&nbsp;\n                    <button className=\"save-btn\" onClick={this.saveAsPDF}>Save as PDF</button>\n                    &nbsp;&nbsp;\n                    <button onClick={this.props.refresh}>Refresh</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Canvas;","import React from 'react'\n\nconst Checkbox = ({ type='checkbox', text, checked, onChange }) => (\n    <label className=\"check-label\">\n        <input type={type} checked={checked} onChange={onChange}/>\n        <span className=\"checkmark\"></span>\n        <span className=\"check-custom\">{text}</span>\n    </label>\n)\n\n\nexport default Checkbox; ","import React from 'react'\nimport Canvas from './Canvas'\nimport Checkbox from './Checkbox'\n\nclass Home extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            uploaded: false, \n            trees: [],\n            RelScaling : true,\n            Cladogram : false,\n            AbsScaling : false,\n            currLen : 0\n        }\n        this.CurrFile = null;\n        this.currFileLength = 0;\n        this.previousFileLen = 0;\n        this.past =0;\n    }\n\n    handleUpload = (ev) => {\n        if( window.File && window.FileReader && window.FileList && window.Blob ){\n            var reader = new FileReader();\n            var file = document.querySelector('input[type=file]').files[0];\n            var textFile = /text.*/;\n            var scope = this; // for anonymous funtion below that is not in the class component \n            if(file){\n                if(file.type.match(textFile) && !file.type.match(/text\\/javascript/)) // .js file is also considered a text file (try console.log(file.type));\n                {\n                    reader.onload = function (event) {\n                        if(scope.varifyInputFile(event.target.result.split(\"\\n\"))){\n                            scope.setState({\n                                trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                                uploaded: true,                              // switch upload status -> also triggers the actual drawing of the tree\n                                currLen : event.target.result.split(\"\\n\").length\n                            });\n                            scope.setState({currLen: event.target.result.split(\"\\n\").length}); \n                            // console.log(this.currFileLength);\n                            scope.past = scope.state.currLen;\n                        }\n                        else{\n                            console.log(\"bad input\");\n                            scope.forceUpdate();\n                        }\n                    }\n                    this.CurrFile = file; // for refresh purposes\n                    reader.readAsText(file);\n                }\n                else {\n                    alert(\"Upload was not a .txt file\");\n                }\n            }\n        }\n        else {\n            alert(\"Your browswer is too old for HTML5 file uploads. Please update.\");\n        }\n    }\n\n    handleRefresh = async () =>{\n        if(this.CurrFile!==null){\n            var reader = new FileReader(); \n            var scope = this;\n            reader.onload = function (event) {\n                if(scope.varifyInputFile(event.target.result.split(\"\\n\"))){\n                    scope.setState({\n                        trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                        uploaded: true,                              // switch upload status -> also triggers the actual drawing of the tree\n                        currLen : event.target.result.split(\"\\n\").length\n                    });\n                    scope.setState({currLen: event.target.result.split(\"\\n\").length}); \n                    scope.logDiffLength();\n                    scope.past = scope.state.currLen;\n                }\n                else{\n                    scope.forceUpdate();\n                }\n            }\n            await reader.readAsText(this.CurrFile);\n            // this.logging();\n        }\n        // window.setTimeout(3000);\n    }\n\n    logDiffLength=()=>{\n        if(this.past !== this.state.currLen){\n            if(this.past < this.state.currLen){\n                alert(`New lines added to file.\\nOld Length: ${this.past}\\nNew Length: ${this.state.currLen}\\nAdded ${this.state.currLen - this.past} new lines to the file.`);\n            }\n            else{\n                alert(`Seems like you deleted some lines in your file! That doesn't seem right.\\nPlease check your input file again`);\n            }\n        }\n    }\n\n    handleRelScalingChange = (ev)=> {\n        this.setState({\n            RelScaling: true, \n            Cladogram: false, \n            AbsScaling: false\n        });\n    }\n\n    handleCladogramChange = (ev) => {\n        this.setState({\n            Cladogram : true,\n            RelScaling: false,\n            AbsScaling: false\n        });\n    }\n\n    handleAbsScaling = (ev) => {\n        this.setState({\n            AbsScaling : true, \n            Cladogram: false,\n            RelScaling: false\n        })\n    }\n\n    varifyInputFile = (inputVect) => {\n        let returnString =\"\";\n        let badInput = false;\n\n        for(let i = 0; i < inputVect.length-1; i++){\n            let string = inputVect[i].replace(/(\\s[#]\\d+\\.\\d+)/g, \"\");\n\n            //1. paranthesis test \n            if( string.match(/(\\()/g).length !== string.match(/(\\))/g).length ){\n                returnString+=(`Mismatch parenthesis at line ${i+1}\\n`);\n                badInput = true;\n            }\n            \n            //2. comma to species name check\n            if( string.match(/(?=\\D)(\\w+)/g).length !== (string.match(/,/g).length +1) ){\n                returnString+=(`Incorrect tree depth at line ${i+1}\\n`);\n                badInput = true;\n            }\n\n            //3. species name and branchlength test \n            if( string.match(/(?=\\D)(\\w+)/g).length !== string.match(/(?=\\D)(\\w+)(:\\s\\d+\\.\\d+)/g).length ){\n                returnString+=(`Mismatch number of species and brlength at line ${i+1}\\n`);\n                badInput = true;\n            }\n        }\n        if(badInput){\n            alert(returnString);\n            return false;\n        }\n        return true;\n    }\n\n    render(){\n        return(\n            <div style={{marginLeft:30, marginTop:15, marginRight:30}}>\n                <Canvas received={this.state.uploaded} trees = {this.state.trees} clado = {this.state.Cladogram} relscal={this.state.RelScaling} refresh={this.handleRefresh}/>\n                <label className=\"file-inp\">\n                    <input type ='file' onChange={this.handleUpload} />\n                </label>\n                <div className=\"scaling-btn-group\">\n                    <Checkbox text=\"Absolute Scaling\" onChange={this.handleAbsScaling} checked={this.state.AbsScaling}/>\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <Checkbox text=\"Relative Scaling\" onChange={this.handleRelScalingChange} checked={this.state.RelScaling} />\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <Checkbox text=\"Cladogram\" onChange={this.handleCladogramChange} checked={this.state.Cladogram} />\n                </div>\n                \n            </div>\n        )\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}