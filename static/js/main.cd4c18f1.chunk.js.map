{"version":3,"sources":["libs/treeUtils.js","components/Slider.js","components/Canvas.js","components/Checkbox.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TREEROOT","SPNAMES","spaceFactor","heightFactor","space","maxHeight","scaleBar","Node","data","left","right","father","this","height","theta","index","circle","Circle","id","x","y","Indexer","assign","node","tallestTreeScale","useCladogram","maxNameLength","circles","getMaxHeight","noTr","treeVec","h1","getTreeHeight","tree","Newtree","replace","p","newick","match","blsum","Number","j","k","length","makeEdge","z","context","lineWidth","lineJoin","beginPath","moveTo","lineTo","stroke","printNames","nameArray","currX","cY","i","textAlign","textBaseline","save","translate","rotate","Math","PI","fillText","restore","postOrder","brLng","printTheta","drawRootTheta","drawOneTree","value","canvas","hF","treeFromNewick","width","initX","toPrecision","font","newickString","brLen","ctx","orderTag","getMaxLenSN","n","current","cumY","pos","order","parseFloat","max","sN","mLen","iD","measureText","branchTip","X","Y","message","clado","console","log","newSpeciesOrder","treeList","ExtractSpeciesOrder","tNode","newickSt","currNode","push","displayIndex","indexer","EnumerateTree","DrawIndex","drawIndexToCanvas","createCircle","radius","MaxNameLen","arc","fillStyle","fill","strokeStyle","swapNodes","nodeId","Swap","InputNodeID","temp","redrawCurrentTree","SliderHeader","styled","div","StyledSlider","StyledThumb","getPercentage","getLeft","percentage","Slider","initial","onChange","initialPercentage","sliderRef","React","useRef","thumbRef","currentRef","diff","handleMouseMove","event","newX","clientX","getBoundingClientRect","end","offsetWidth","newPercentage","newValue","getValue","style","round","textContent","handleMouseUp","document","removeEventListener","ref","onMouseDown","addEventListener","TreeUtils","require","Canvas","props","IntersectWithCircle","pow","init","state","pop","utils","currentTree","Cladogram","RelScaling","onWindowResize","window","innerWidth","innerHeight","clearRect","DisplayIndex","runDisplayIndex","slideToNextTree","toggleIndexDisplay","relscale","saveAsPDF","imgData","toDataURL","pdf","jsPDF","addImage","receivedData","received","trees","relscal","updateMe","refs","getContext","e","offsetLeft","clientY","offsetTop","forEach","formatFn","number","toFixed","className","onClick","refresh","Component","Checkbox","type","text","checked","Home","handleUpload","ev","File","FileReader","FileList","Blob","reader","file","querySelector","files","scope","onload","varifyInputFile","target","result","split","setState","uploaded","forceUpdate","CurrFile","readAsText","alert","handleRefresh","handleRelScalingChange","handleCladogramChange","inputVect","returnString","badInput","string","currFileLength","previousFileLen","marginLeft","marginTop","marginRight","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAspBAA,EAAOC,QArpBP,WAAqB,IAEbC,EAFY,OAGZC,EAAQ,GAIRC,EAAY,GACZC,EAAa,IAEbC,EAAM,EAINC,EAAU,EAEVC,EAAS,EASb,SAASC,EAAKC,EAAMC,EAAMC,EAAOC,GAC7BC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,OAASA,EACdC,KAAKR,MAAQ,EACbQ,KAAKC,OAAS,EACdD,KAAKE,MAAQ,EACbF,KAAKG,OAAS,GACdH,KAAKI,OAAS,IAAIC,EAItB,SAASA,IACLL,KAAKM,GAAK,EACVN,KAAKO,EAAI,EACTP,KAAKQ,EAAI,EAuZb,SAASC,IAAU,IAAD,OACdT,KAAKG,MAAQ,EACbH,KAAKU,OAAS,SAACC,GACXA,EAAKR,MAAQ,EAAKA,MAClBQ,EAAKP,OAAOE,GAAK,EAAKH,MACtB,EAAKA,SAnbbH,KAAKY,kBAAiB,EACtBZ,KAAKa,cAAa,EAClBb,KAAKc,cAAc,EACnBd,KAAKe,QAAQ,GAuBbf,KAAKgB,aAAe,SAACC,EAAMC,GACvBzB,EAAU,EACV,IAAI,IAAIe,EAAE,EAAGA,EAAES,EAAMT,IAAI,CACrB,IAAIW,EAAK,EAAKC,cAAcF,EAAQV,IACjCW,EAAK1B,IACJA,EAAY0B,KAKxBnB,KAAKoB,cAAgB,SAACC,GAKlB,IAHA,IAAIC,EAAUD,EAAKE,QAAQ,iCAAiC,IAExDC,EAAE,EACa,MAAbF,EAAQE,IACVA,IAKJ,IAAIC,GAFJH,EAAUA,EAAQC,QAAQ,MAAM,KAEbG,MAAM,gFAErBC,EAAM,EACVA,GAASC,OAAOH,EAAO,IAEvB,IADA,IAAII,EAAE,EACEC,EAAE,EAAGA,EAAEL,EAAOM,OAAQD,IACX,MAAZL,EAAOK,GACND,IAEkB,MAAZJ,EAAOK,IAAgB,IAAJD,GAASL,EAAE,GACpCG,GAASC,OAAOH,EAAOK,EAAE,IAAKN,KAEZ,MAAZC,EAAOK,IAAYD,EAAE,GAC3BA,IAGR,OAAOF,GAGX3B,KAAKgC,SAAW,SAACzB,EAAEC,EAAEyB,EAAEC,GACnBA,EAAQC,UAAY,EACpBD,EAAQE,SAAW,QACnBF,EAAQG,YACRH,EAAQI,OAAO/B,EAAEC,GACjB0B,EAAQK,OAAOhC,EAAE0B,GACjBC,EAAQM,UAGZxC,KAAKyC,WAAa,SAACC,EAAWR,GAI1B,IAHA,IAAIS,EA1FE,GA0FUrD,EACZsD,EA1FE,GA0FO,EAAK9B,cAAe,GAExB+B,EAAE,EAAGA,EAAEH,EAAUX,OAAOc,IAC7BX,EAAQY,UAAU,QAClBZ,EAAQa,aAAa,SACrBb,EAAQc,OACRd,EAAQe,UAAUN,EAAMC,GACxBV,EAAQgB,OAAO,IAAAC,KAAKC,IACpBlB,EAAQmB,SAASX,EAAUG,GAAG,EAAE,GAChCX,EAAQoB,UACXX,GAAOrD,GAIZU,KAAKuD,UAAY,SAAC5C,EAAKuB,EAAQsB,GAC3B,GAAKA,GAyCA,GAAGA,EAAM,CACV,GAAY,OAAT7C,EAEC,OAEY,MAAbA,EAAKd,MAEJ,EAAK0D,UAAU5C,EAAKd,KAAMqC,GAAS,GAEtB,MAAdvB,EAAKb,OAEJ,EAAKyD,UAAU5C,EAAKb,MAAOoC,GAAS,GAEtB,OAAdvB,EAAKd,MAAgC,OAAfc,EAAKb,OAE3BN,GAAOF,EACPqB,EAAKnB,MAAMA,EAKX,EAAKiE,WAAY9C,EAAKnB,MAxKxB,GACA,GAuK2C,EAAKsB,cAAeH,EAAMuB,GAAS,GAC5E,EAAKF,SAAUrB,EAAKnB,MAzKtB,GACA,GAwKyC,EAAKsB,cAAeH,EAAKV,OAAOV,EAxKzE,GAwK4F,EAAKuB,cAAeoB,KAI9GvB,EAAKnB,OAASmB,EAAKd,KAAKL,MAAQmB,EAAKb,MAAMN,OAAO,EAClD0C,EAAQC,UAAY,EACpBD,EAAQE,SAAW,QAEnBF,EAAQG,YACRH,EAAQI,OAAO3B,EAAKd,KAAKL,MAlL3B,GAkLuCmB,EAAKb,MAAMG,OAAOV,EAjLzD,GAiL4E,EAAKuB,eAC/EoB,EAAQK,OAAO5B,EAAKb,MAAMN,MAnL5B,GAmLwCmB,EAAKb,MAAMG,OAAOV,EAlL1D,GAkL6E,EAAKuB,eAChFoB,EAAQM,SAEU,MAAf7B,EAAKZ,QAEJ,EAAK0D,WAAW9C,EAAKnB,MAxL3B,GAwLwCmB,EAAKb,MAAMG,OAAOV,EAvL1D,GAuL6E,EAAKuB,cAAeH,EAAMuB,GAEjG,EAAKF,SAASrB,EAAKnB,MA1LzB,GA0LqCmB,EAAKb,MAAMG,OAAOV,EAzLvD,GAyL0E,EAAKuB,cAAcH,EAAKV,OAAOV,EAzLzG,GAyL4H,EAAKuB,cAAcoB,IAGzI,EAAKwB,cAAc/C,EAAMuB,EAASvB,EAAKT,OAAO,SAnF/C,CACP,GAAY,OAATS,EAEC,OAEa,OAAdA,EAAKd,MAEJ,EAAK0D,UAAU5C,EAAKd,KAAMqC,GAAS,GAErB,OAAfvB,EAAKb,OAEJ,EAAKyD,UAAU5C,EAAKb,MAAOoC,GAAS,GAEvB,MAAbvB,EAAKd,MAA8B,MAAdc,EAAKb,OAE1BN,GAAOF,EACPqB,EAAKnB,MAAMA,EACX,EAAKiE,WAAY9C,EAAKnB,MA3HxB,GA2HqCmB,EAAKV,OAAOV,EA1HjD,GA0HoE,EAAKuB,cAAeH,EAAMuB,GAC5F,EAAKF,SAASrB,EAAKnB,MA5HrB,GA4HkCmB,EAAKV,OAAOV,EA3H9C,GA2HiE,EAAKuB,cAAcH,EAAKZ,OAAOE,OAAOV,EA3HvG,GA2H0H,EAAKuB,cAAcoB,KAG3IvB,EAAKnB,OAASmB,EAAKd,KAAKL,MAAQmB,EAAKb,MAAMN,OAAO,EAClD0C,EAAQC,UAAY,EACpBD,EAAQE,SAAW,QACnBF,EAAQG,YACRH,EAAQI,OAAO3B,EAAKd,KAAKL,MAnI3B,GAmIuCmB,EAAKV,OAAOV,EAlInD,GAkIsE,EAAKuB,eACzEoB,EAAQK,OAAO5B,EAAKb,MAAMN,MApI5B,GAoIwCmB,EAAKV,OAAOV,EAnIpD,GAmIuE,EAAKuB,eAC1EoB,EAAQM,SACU,MAAf7B,EAAKZ,QAIJ,EAAK0D,WAAW9C,EAAKnB,MA1I3B,GA0IuCmB,EAAKV,OAAOV,EAzInD,GAyIsE,EAAKuB,cAAeH,EAAMuB,GAC1F,EAAKF,SAASrB,EAAKnB,MA3IzB,GA2IqCmB,EAAKV,OAAOV,EA1IjD,GA0IoE,EAAKuB,cAAcH,EAAKZ,OAAOE,OAAOV,EA1I1G,GA0I6H,EAAKuB,cAAcoB,IAG1I,EAAKwB,cAAc/C,EAAMuB,EAASvB,EAAKT,OAAO,MAqD9DF,KAAK2D,YAAc,SAACC,EAAM1C,EAAQL,EAAagD,EAAO3B,EAAQtB,EAAiBkD,GACxEF,EAAQ1C,EAAQa,SAEXlB,EAIA,EAAKkD,eAAe7C,EAAQ0C,IAAO,EAAO1B,GAH1C,EAAK6B,eAAe7C,EAAQ0C,IAAO,EAAM1B,GAO7C5C,EAAmC,IAApBuE,EAAOG,MA9MpB,IA8MqC3E,EAAQ0C,OAC/CvC,EAAM,EAWFD,EAVAsB,EAUaiD,EAAG1E,EAASa,OATtBW,EACckD,EAAGrE,EAIHqE,EAAG1E,EAASS,KAAKI,OAOlCY,IACAnB,EAAS,GAAKH,EACd,EAAKyC,SAASiC,EA9NhB,GA8N+B,EAAKnD,cA9NpC,GA8NwD,EAAKA,cAAcpB,EAASH,EAAa2C,GAC/FA,EAAQmB,SAAS3D,EAASwE,YAAY,GAAGD,EA/N3C,GA+N0D,EAAKnD,cAAcpB,EAASH,IAGxF2C,EAAQiC,KAAO,yBACf,EAAK1B,WAAWpD,EAAQ6C,GACpBrB,EAIA,EAAK0C,UAAUnE,EAAS8C,GAAQ,GAHhC,EAAKqB,UAAUnE,EAAS8C,GAAQ,KAQ5ClC,KAAK+D,eAAiB,SAACK,EAAaC,EAAMC,GACtC,IAAIC,EAAW,EACf,GAAIF,GAmDC,GAAGA,EAAM,CACVhF,EAAU+E,EAAa7C,QAAQ,0BAA0B,IAAIA,QAAQ,SAAS,IAAIA,QAAQ,KAAK,IAAIG,MAAM,gBACzG,EAAK8C,YAAYnF,EAASiF,GAO1B,IALA,IAAI7C,GADJ2C,EAAaA,EAAa7C,QAAQ,SAAS,IAAIA,QAAQ,KAAK,KACpCG,MAAM,8FAC1B+C,EAAI,IAAI9E,EAAK,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,MAEnD+E,EADJtF,EAAWqF,EAEPE,EAAK,EACDC,EAAM,EAAGA,EAAMnD,EAAOM,OAAQ6C,IAIlC,OAHoB,MAAhBnD,EAAOmD,IAA8B,MAAdnD,EAAOmD,KAC9BH,EAAI,IAAI9E,EAAK,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,OAEjD8B,EAAOmD,IACV,IAAK,IAEDF,EAAQ7E,KAAO4E,EACfA,EAAE1E,OAAS2E,EACXA,EAAUD,EACV,MACJ,IAAK,KAEDC,EAAUA,EAAQ3E,QACVD,MAAM2E,EACdA,EAAE1E,OAAS2E,EACXA,EAAUD,EACV,MACJ,IAAK,IAEDE,EAAOD,EAAQzE,OACfyE,EAAUA,EAAQ3E,OAClB,MACJ,IAAK,IAED,MACJ,QACI2E,EAAQG,MAAQN,EACiE,MAA5E9C,EAAOmD,GAAKlD,MAAM,yDAA0G,MAAtCD,EAAOmD,GAAKlD,MAAM,iBACzGgD,EAAQzE,OAAS6E,WAAWrD,EAAOmD,IAAMD,EAErClD,EAAOmD,GAAKlD,MAAM,iBACtBgD,EAAQxE,MAAQuB,EAAOmD,IAGvBF,EAAQ9E,KAAO6B,EAAOmD,GACtBD,EAAK,SAhGf,CACN,IAAI1E,EAASmE,EAAa1C,MAAM,SAASK,OAEzCqC,EAAeA,EAAa7C,QAAQ,SAAS,IAAIA,QAAQ,KAAK,IAC9DlC,EAAU+E,EAAa1C,MAAM,gBAC7B,EAAK8C,YAAYnF,EAASiF,GAC1B,IAAI7C,EAAS2C,EAAa1C,MAAM,6CAE5B+C,EAAI,IAAI9E,EAAK,OAAQ,KAAM,KAAM,MACrC8E,EAAExE,OAASA,EAEX,IAAIyE,EADJtF,EAAWqF,EAEXC,EAAQzE,OAAO,EACf,IAAI,IAAI2E,EAAM,EAAGA,EAAMnD,EAAOM,OAAQ6C,IAAM,CAIxC,OAHoB,MAAhBnD,EAAOmD,IAA8B,MAAdnD,EAAOmD,KAC9BH,EAAI,IAAI9E,EAAK,QAAS,KAAM,KAAM,OAE/B8B,EAAOmD,IACV,IAAK,IAEGF,EAAQ7E,KAAO4E,EACfA,EAAE1E,OAAS2E,EACXA,EAAUD,EACd,MACJ,IAAK,KAEGC,EAAUA,EAAQ3E,QACVD,MAAM2E,EACdA,EAAE1E,OAAS2E,EACXA,EAAUD,EACd,MACJ,IAAK,KAEGC,EAAUA,EAAQ3E,QACVE,OAAOkD,KAAK4B,IAAIL,EAAQ5E,MAAMG,OAAOyE,EAAQ7E,KAAKI,QAAQ,EACtE,MACJ,QACOwB,EAAOmD,GAAKlD,MAAM,mBACjBgD,EAAQxE,MAAQuB,EAAOmD,GACvBF,EAAQG,MAAQN,IAGhBG,EAAQ9E,KAAO6B,EAAOmD,GACtBF,EAAQzE,OAAS,GAI7BsE,GAAU,EAEjBnF,EAASa,OAAOkD,KAAK4B,IAAIL,EAAQ5E,MAAMG,OAAOyE,EAAQ7E,KAAKI,QAAQ,IAuDxED,KAAKwE,YAAc,SAACQ,EAAI9C,GAIpB,IAHA,IAAI+C,EAAO,EACPC,EAAK,EAEDrC,EAAE,EAAGA,EAAEmC,EAAGjD,OAAQc,IACnBmC,EAAGnC,GAAGd,OAASkD,IACdA,EAAOD,EAAGnC,GAAGd,OACbmD,EAAKrC,GAETX,EAAQiC,KAAO,yBACf,EAAKrD,cAAcoB,EAAQiD,YAAYH,EAAGE,IAAKlB,OAMvDhE,KAAKyD,WAAa,SAAClD,EAAEC,EAAEG,EAAKuB,EAAQkD,GAChC,GAAGzE,EAAK,CAEJuB,EAAQY,UAAU,QAClBZ,EAAQa,aAAa,SACrBb,EAAQc,OACR,IAAIqC,EAAI9E,EAAE,GACN+E,EAAI9E,EAAE,GACV0B,EAAQe,UAAUoC,EAAGC,GACrB,IAAIC,EAAU5E,EAAKT,MAAMqB,QAAQ,MAAM,IACvCW,EAAQmB,SAASkC,EAAQ,EAAE,GAC3BrD,EAAQoB,YAIhBtD,KAAK0D,cAAgB,SAAC/C,EAAMuB,EAASqD,EAASC,GAC1C,GAAGD,EACC,GAAIC,EASA,CACA,IAAIjF,GAAKI,EAAKd,KAAKL,MAAMmB,EAAKb,MAAMN,OAAO,EAnY7C,GAoYMgB,EAAIG,EAAKV,OAAOV,EAnYtB,GAmYyC,EAAKuB,cAC5CoB,EAAQc,OACRd,EAAQe,UAAU1C,EAAEC,EAAE,IACtB+E,EAAUA,EAAQhE,QAAQ,MAAM,IAChCW,EAAQmB,SAASkC,EAAQ,EAAE,GAC3BrD,EAAQoB,cAhBF,CACN,IAAI/C,GAAKI,EAAKd,KAAKL,MAAMmB,EAAKb,MAAMN,OAAO,EA1X7C,GA2XMgB,EAAIG,EAAKb,MAAMG,OAAOV,EA1X5B,GA0X+C,EAAKuB,cAClDoB,EAAQc,OACRd,EAAQe,UAAU1C,EAAEC,EAAE,IACtB+E,EAAUA,EAAQhE,QAAQ,MAAM,IAChCW,EAAQmB,SAASkC,EAAQ,EAAE,GAC3BrD,EAAQoB,eAaZmC,QAAQC,IAAI,QAwBpB1F,KAAK2F,gBAAkB,SAAChF,GACpB,IAAIiF,EAAU,GAEd,OA6BJ,SAASC,EAAoBC,EAAOC,GAGhC,GAAa,OAAVD,EACC,OAEJ,IAAIE,EAAWF,EACM,OAAlBE,EAASnG,MACRgG,EAAoBG,EAASnG,KAAMkG,GAEjB,OAAnBC,EAASlG,OACR+F,EAAoBG,EAASlG,MAAOiG,GAElB,OAAlBC,EAASnG,MAAsC,OAAnBmG,EAASlG,OACrCiG,EAASE,KAAKH,EAAMlG,MA5CxBiG,CAAoBlF,EAAKiF,GAClBA,GAIX5F,KAAKkG,aAAe,SAAC7B,EAAOnC,GACxB,GAA2B,IAAxB,EAAKnB,QAAQgB,QACZ,GAAG3C,EAAS,CACR,IAAI+G,EAAU,IAAI1F,GAwC9B,SAAS2F,EAAczF,EAAKwF,GACxB,GAAY,OAATxF,EACC,OAEc,OAAdA,EAAKd,MAA+B,OAAbc,EAAKb,OAC5BqG,EAAQzF,OAAOC,GAGF,OAAdA,EAAKd,MACJuG,EAAczF,EAAKd,KAAMsG,GAGX,OAAfxF,EAAKb,OACJsG,EAAczF,EAAKb,MAAOqG,GApDtBC,CAAchH,EAAS+G,GACvB,EAAKE,UAAUjH,EAAUiF,EAAOnC,EAAS,EAAKpB,qBAI/C1B,IACC,EAAK2B,QAAS,GACd,EAAKsF,UAAUjH,EAAUiF,EAAOnC,EAAS,EAAKpB,iBAiD1Dd,KAAKqG,UAAY,SAAC1F,EAAM0D,EAAOnC,EAASpB,GACxB,OAATH,IAGe,OAAdA,EAAKd,MAAgC,OAAbc,EAAKb,QAE1BuE,EAGC,EAAKiC,kBAAmB3F,EAAKnB,MAjf/B,GAif4CmB,EAAKb,MAAMG,OAAOV,EAhf9D,GAgfkFuB,EAAeH,EAAMuB,EAASmC,GAG9G,EAAKiC,kBAAmB3F,EAAKnB,MApf/B,GAof4CmB,EAAKV,OAAOV,EAnfxD,GAmf4EuB,EAAeH,EAAMuB,EAASmC,IAG/F,OAAd1D,EAAKd,MACJ,EAAKwG,UAAU1F,EAAKd,KAAMwE,EAAOnC,EAASpB,GAE5B,OAAfH,EAAKb,OACJ,EAAKuG,UAAU1F,EAAKb,MAAOuE,EAAOnC,EAASpB,KAKnDd,KAAKuG,aAAe,SAAChG,EAAGC,EAAGgG,EAAQlG,GAC/B,EAAKS,QAAQkF,KAAK,CAAC1F,EAAGA,EAAGC,EAAGA,EAAGgG,OAAQA,EAAQlG,GAAIA,KAGvDN,KAAKsG,kBAAoB,SAAC/F,EAAGC,EAAGiG,EAAY9F,EAAMuB,EAASmC,GAEvD,GAAmB,OAAhB1D,EAAKZ,OACJ,GAAGsE,EAAM,CACL,IAAI9D,GAAKI,EAAKd,KAAKL,MAAMmB,EAAKb,MAAMN,OAAO,EAxgB7C,GAygBMgB,EAAIG,EAAKb,MAAMG,OAAOV,EAxgB5B,GAwgB+CkH,EAE7CvE,EAAQc,OACRd,EAAQG,YACR,EAAKkE,aAAahG,EAAGC,EARhB,GAQ2BG,EAAKR,OACrC+B,EAAQwE,IAAInG,EAAGC,EATV,GASqB,EAAG,EAAE2C,KAAKC,IAAI,GACxClB,EAAQyE,UAAY,UACpBzE,EAAQ0E,OACR1E,EAAQC,UAAY,EACpBD,EAAQ2E,YAAc,UACtB3E,EAAQM,SACRN,EAAQoB,UAERpB,EAAQc,OACRd,EAAQe,UAAU1C,EAAE,EAAGC,GACvB0B,EAAQyE,UAAY,UACpBzE,EAAQmB,SAAS1C,EAAKR,MAAM,EAAE,GAC9B+B,EAAQoB,cAER,CACA,IAAI/C,GAAKI,EAAKd,KAAKL,MAAMmB,EAAKb,MAAMN,OAAO,EA7hB7C,GA6hBqD,GAC/CgB,EAAIG,EAAKV,OAAOV,EA7hBtB,GA6hByCkH,EAAW,GAElDvE,EAAQc,OACRd,EAAQG,YACR,EAAKkE,aAAahG,EAAGC,EA7BhB,GA6B2BG,EAAKR,OACrC+B,EAAQwE,IAAInG,EAAGC,EA9BV,GA8BqB,EAAG,EAAE2C,KAAKC,IAAI,GACxClB,EAAQyE,UAAY,UACpBzE,EAAQ0E,OACR1E,EAAQC,UAAY,EACpBD,EAAQ2E,YAAc,UACtB3E,EAAQM,SACRN,EAAQoB,UAERpB,EAAQc,OACRd,EAAQe,UAAU1C,EAAE,EAAGC,GACvB0B,EAAQyE,UAAY,UACpBzE,EAAQmB,SAAS1C,EAAKR,MAAM,EAAE,GAC9B+B,EAAQoB,eAIZpB,EAAQY,UAAU,QAClBZ,EAAQa,aAAa,SAErBb,EAAQc,OACRd,EAAQG,YACR,EAAKkE,aAAahG,EAAGC,EAAE,GAnDd,GAmD0BG,EAAKR,OACxC+B,EAAQwE,IAAInG,EAAGC,EAAE,GApDR,GAoDoB,EAAG,EAAE2C,KAAKC,IAAI,GAC3ClB,EAAQyE,UAAY,UACpBzE,EAAQ0E,OACR1E,EAAQC,UAAY,EACpBD,EAAQ2E,YAAc,UACtB3E,EAAQM,SACRN,EAAQoB,UAERpB,EAAQc,OACRd,EAAQe,UAAU1C,EAAE,EAAGC,EAAE,IACzB0B,EAAQyE,UAAY,UACpBzE,EAAQmB,SAAS1C,EAAKR,MAAO,EAAG,GAChC+B,EAAQoB,WAIhBtD,KAAK8G,UAAY,SAACC,EAAQlG,EAAcgD,EAAQ3B,EAAStB,EAAkBkD,GACpE1E,KAzLP,SAAS4H,EAAKrG,EAAKsG,GACf,GAAY,OAATtG,EAAH,CAGA,GAAGA,EAAKR,QAAU8G,GACXtG,EAAKd,MAAQc,EAAKb,MAAM,CACvB,IAAIoH,EAAOvG,EAAKd,KAChBc,EAAKd,KAAOc,EAAKb,MACjBa,EAAKb,MAAQoH,EAGJ,OAAdvG,EAAKd,MACJmH,EAAKrG,EAAKd,KAAMoH,GAEF,OAAftG,EAAKb,OACJkH,EAAKrG,EAAKb,MAAOmH,IA2KjBD,CAAK5H,EAAS2H,GACdzH,EAAmC,IAApBuE,EAAOG,MA5kBpB,IA4kBqC3E,EAAQ0C,OAC/CvC,EAAM,EAWFD,EAVAsB,EAUaiD,EAAG1E,EAASa,OATtBW,EACckD,EAAGrE,EAIHqE,EAAG1E,EAASS,KAAKI,OAQlCY,IACAnB,EAAS,GAAKH,EACd,EAAKyC,SAASiC,EA7lBhB,GA6lB+B,EAAKnD,cA7lBpC,GA6lBwD,EAAKA,cAAcpB,EAASH,EAAa2C,GAC/FA,EAAQmB,SAAS3D,EAASwE,YAAY,GAAGD,EA9lB3C,GA8lB0D,EAAKnD,cAAcpB,EAASH,IAGxF2C,EAAQiC,KAAO,yBACf,EAAK1B,WAAW,EAAKkD,gBAAgBvG,GAAW8C,GAC5CrB,EAIA,EAAK0C,UAAUnE,EAAS8C,GAAQ,GAHhC,EAAKqB,UAAUnE,EAAS8C,GAAQ,KAQ5ClC,KAAKmH,kBAAoB,SAACtG,EAAcgD,EAAQ3B,EAAStB,EAAkBkD,GACpE1E,IACCE,EAAmC,IAApBuE,EAAOG,MA/mBpB,IA+mBqC3E,EAAQ0C,OAC/CvC,EAAM,EAWFD,EAVAsB,EAUaiD,EAAG1E,EAASa,OATtBW,EACckD,EAAGrE,EAIHqE,EAAG1E,EAASS,KAAKI,OAOlCY,IACAnB,EAAS,GAAKH,EACd,EAAKyC,SAASiC,EA/nBhB,GA+nB+B,EAAKnD,cA/nBpC,GA+nBwD,EAAKA,cAAcpB,EAASH,EAAa2C,GAC/FA,EAAQiC,KAAO,yBACfjC,EAAQmB,SAAS3D,EAASwE,YAAY,GAAGD,EAjoB3C,GAioB0D,EAAKnD,cAAcpB,EAASH,IAGxF2C,EAAQiC,KAAO,yBACf,EAAK1B,WAAW,EAAKkD,gBAAgBvG,GAAW8C,GAC5CrB,EAIA,EAAK0C,UAAUnE,EAAS8C,GAAQ,GAHhC,EAAKqB,UAAUnE,EAAS8C,GAAQ,O,woBC1oBhD,IAAMkF,EAAeC,IAAOC,IAAV,KAKZC,EAAeF,IAAOC,IAAV,KAOZE,EAAcH,IAAOC,IAAV,KAaXG,EAAgB,SAAC/C,EAASK,GAAV,OAAmB,IAAML,EAAWK,GAIpD2C,EAAU,SAACC,GAAD,qBAAwBA,EAAxB,aA2EDC,EAzEA,SAAC,GAIT,IAHLC,EAGI,EAHJA,QACA9C,EAEI,EAFJA,IACA+C,EACI,EADJA,SAGMC,EAAoBN,EAAcI,EAAS9C,GAE3CiD,EAAYC,IAAMC,SAClBC,EAAWF,IAAMC,SACjBE,EAAaH,IAAMC,SAEnBG,EAAOJ,IAAMC,OAAO,MAEpBI,EAAkB,SAAAC,GACtB,IAAIC,EACFD,EAAME,QACNJ,EAAK3D,QACLsD,EAAUtD,QAAQgE,wBAAwB7I,KAEtC8I,EACJX,EAAUtD,QAAQkE,YAAcT,EAASzD,QAAQkE,YAI/CJ,EAFU,IAGZA,EAAO,GAGLA,EAAOG,IACTH,EAAOG,GAGT,IAAME,EAAgBpB,EAAce,EAAMG,GACpCG,EAtCO,SAACnB,EAAY5C,GAAb,OAAsBA,EAAM,IAAO4C,EAsC/BoB,CAASF,EAAe9D,GAEzCoD,EAASzD,QAAQsE,MAAMnJ,KAAO6H,EAAQvE,KAAK8F,MAAMJ,IACjDT,EAAW1D,QAAQwE,YAAc/F,KAAK8F,MAAMH,GAE5ChB,EAASgB,IAGLK,EAAgB,SAAhBA,IACJC,SAASC,oBAAoB,UAAWF,GACxCC,SAASC,oBAAoB,YAAaf,IAW5C,OACE,oCACE,kBAAClB,EAAD,KACE,4BAAQkC,IAAKlB,GAAaP,GAD5B,YAGG9C,GAEH,kBAACwC,EAAD,CAAc+B,IAAKtB,GACjB,kBAACR,EAAD,CACEwB,MAAO,CAAEnJ,KAAM6H,EAAQK,IACvBuB,IAAKnB,EACLoB,YAnBgB,SAAAhB,GACtBF,EAAK3D,QACH6D,EAAME,QAAUN,EAASzD,QAAQgE,wBAAwB7I,KAE3DuJ,SAASI,iBAAiB,YAAalB,GACvCc,SAASI,iBAAiB,UAAWL,S,iBCjFrCM,EAAYC,EAAQ,IAwKTC,E,YArKX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAwDVC,oBAAsB,SAACjF,EAAKxE,GACxB,OAAO+C,KAAK2G,IAAIlF,EAAIrE,EAAEH,EAAOG,EAAE,GAAG4C,KAAK2G,IAAIlF,EAAIpE,EAAEJ,EAAOI,EAAE,GAAK2C,KAAK2G,IAAI1J,EAAOoG,OAAO,IA1DxE,EA+ElBuD,KAAO,WAC+D,OAA/D,EAAKC,MAAM9I,QAAQ,EAAK8I,MAAM9I,QAAQa,OAAO,GAAGL,MAAM,MACrD,EAAKR,QAAQ+I,MAGjB,IAAIhJ,EAAO,EAAK+I,MAAM9I,QAAQa,OAAO,EACrC,EAAKmI,MAAMlJ,aAAaC,EAAM,EAAK+I,MAAM9I,SACzC,EAAKgJ,MAAMvG,YAAY,EAAKwG,YAAY,EAAKH,MAAM9I,QAAS,EAAK8I,MAAMI,UAAU,EAAKvG,OAAO,EAAKS,IAAK,EAAK0F,MAAMK,WAAmC,GAAvB,EAAK/F,IAAIT,OAAO5D,OAAW,EAAKiK,MAAMpJ,gBAtFtJ,EAyFlBwJ,eAAiB,WACb,EAAKhG,IAAIT,OAAOG,MAAQuG,OAAOC,WAC/B,EAAKlG,IAAIT,OAAO5D,OAA4B,GAAnBsK,OAAOE,YAChC,EAAKnG,IAAIoG,UAAU,EAAE,EAAE,EAAKpG,IAAIT,OAAOG,MAAM,EAAKM,IAAIT,OAAO5D,QAE7D,EAAKiK,MAAM/C,kBAAkB,EAAK6C,MAAMI,UAAU,EAAKvG,OAAQ,EAAKS,IAAK,EAAK0F,MAAMK,WAAmC,GAAvB,EAAK/F,IAAIT,OAAO5D,OAAW,EAAKiK,MAAMpJ,eACnI,EAAK6J,cACJ,EAAKC,gBAAgB,EAAKZ,MAAMI,UAAW,EAAKJ,MAAMK,WAAY,EAAK/F,MAhG7D,EAoGlBuG,gBAAkB,SAAChI,GACf,EAAK8H,cAAe,EACpB,IAAIxK,EAAQgD,KAAK8F,MAAMpG,GACvB,EAAKsH,YAAchK,EACnB,EAAKmE,IAAIoG,UAAU,EAAE,EAAE,EAAKpG,IAAIT,OAAOG,MAAM,EAAKM,IAAIT,OAAO5D,QAC7D,EAAKiK,MAAMvG,YAAYxD,EAAO,EAAK6J,MAAM9I,QAAS,EAAK8I,MAAMI,UAAU,EAAKvG,OAAO,EAAKS,IAAK,EAAK0F,MAAMK,WAAmC,GAAvB,EAAK/F,IAAIT,OAAO5D,OAAW,EAAKiK,MAAMpJ,gBAzG5I,EA4GlBgK,mBAAqB,WACjB,EAAKZ,MAAMnJ,QAAU,GACrB,EAAK4J,cAAgB,EAAKA,aAE1B,EAAKrG,IAAIoG,UAAU,EAAE,EAAE,EAAKpG,IAAIT,OAAOG,MAAM,EAAKM,IAAIT,OAAO5D,QAE7D,EAAKiK,MAAM/C,kBAAkB,EAAK6C,MAAMI,UAAU,EAAKvG,OAAO,EAAKS,IAAK,EAAK0F,MAAMK,WAAmC,GAAvB,EAAK/F,IAAIT,OAAO5D,OAAW,EAAKiK,MAAMpJ,eAClI,EAAK6J,cACJ,EAAKC,gBAAgB,EAAKZ,MAAMI,UAAW,EAAKJ,MAAMK,WAAY,EAAK/F,MApH7D,EAwHlBsG,gBAAkB,SAACpF,EAAOuF,EAAU7I,GAC7BsD,EACC,EAAK0E,MAAMhE,cAAa,EAAOhE,GAG/B,EAAKgI,MAAMhE,cAAa,EAAMhE,IA7HpB,EAoIlB8I,UAAY,WAEL,EAAKL,cACJ,EAAKG,qBAET,IAAIG,EAAU,EAAKpH,OAAOqH,YACtBC,EAAM,IAAIC,IACdD,EAAIE,SAASJ,EAAS,OAAQ,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,IAC/DE,EAAInI,KAAK,iBA1IT,EAAKgH,MAAQ,CACTsB,aAAe,EAAK1B,MAAM2B,SAC1BrK,QAAU,EAAK0I,MAAM4B,MACrB5K,kBAAmB,EACnBC,cAAe,EACfC,cAAgB,EAChBuJ,WAAa,EAAKT,MAAM6B,QACxBrB,UAAY,EAAKR,MAAMpE,MACvBkG,UAAU,GAEd,EAAKvB,YAAc,EACnB,EAAKD,MAAQ,IAAIT,EACjB,EAAKkB,cAAe,EAdN,E,iFA0BE,IAAD,OACf3K,KAAK6D,OAAS7D,KAAK2L,KAAK9H,OACxB7D,KAAKsE,IAAMtE,KAAK6D,OAAO+H,WAAW,MAClC5L,KAAKsE,IAAItB,OACThD,KAAKsE,IAAIH,KAAM,oBACfnE,KAAKsE,IAAIjB,SAAS,4BAA6BrD,KAAK6D,OAAOG,MAAM,KAAK,EAAIhE,KAAK6D,OAAO5D,OAAO,GAC7FD,KAAKsE,IAAIhB,UAETiH,OAAOf,iBAAiB,SAAUxJ,KAAKsK,gBAAgB,GACvDtK,KAAK6D,OAAO2F,iBAAiB,SAAS,SAACqC,GACnC,GAAG,EAAK3B,MAAMnJ,QAAQgB,OAAS,EAAE,CAC7B,IAAM6C,EAAM,CACRrE,EAAGsL,EAAEpD,QAAQ,EAAKnE,IAAIT,OAAOiI,WAC7BtL,EAAGqL,EAAEE,QAAQ,EAAKzH,IAAIT,OAAOmI,WAEjC,EAAK9B,MAAMnJ,QAAQkL,SAAS,SAAA7L,GACrB,EAAKyJ,oBAAoBjF,EAAKxE,KAC7B,EAAKkE,IAAIoG,UAAU,EAAE,EAAE,EAAKpG,IAAIT,OAAOG,MAAM,EAAKM,IAAIT,OAAO5D,QAC7D,EAAKiK,MAAMpD,UAAU1G,EAAOE,GAAI,EAAK0J,MAAMI,UAAW,EAAKvG,OAAQ,EAAKS,IAAK,EAAK0F,MAAMK,WAAmC,GAAvB,EAAK/F,IAAIT,OAAO5D,OAAW,EAAKiK,MAAMpJ,eACvI,EAAK6J,cACJ,EAAKC,gBAAgB,EAAKZ,MAAMI,UAAW,EAAKJ,MAAMK,WAAY,EAAK/F,aAO3FtE,KAAKkK,MAAMtJ,iBAAmBZ,KAAKgK,MAAMK,WACzCrK,KAAKkK,MAAMrJ,aAAeb,KAAKgK,MAAMI,Y,4CASN,IAA5BpK,KAAKgK,MAAMsB,eACVtL,KAAKsE,IAAIoG,UAAU,EAAE,EAAE1K,KAAKsE,IAAIT,OAAOG,MAAMhE,KAAKsE,IAAIT,OAAO5D,QAC7DD,KAAK+J,QAGN/J,KAAK2K,eACJ3K,KAAK2K,cAAgB3K,KAAK2K,aAC1B3K,KAAKkK,MAAMnJ,QAAS,IAIxBf,KAAKkK,MAAMtJ,iBAAmBZ,KAAKgK,MAAMK,WACzCrK,KAAKkK,MAAMrJ,aAAeb,KAAKgK,MAAMI,Y,+BAoEhC,IAAD,OACJ,OACI,6BACI,4BAAQd,IAAI,SAAStF,MAAOuG,OAAOC,WAAYvK,OAA4B,GAAnBsK,OAAOE,cAC/D,kBAAC,EAAD,CACI5C,QAAS,EACT9C,IAAK/E,KAAKgK,MAAM9I,QAAQa,OACxBmK,SAAU,SAAAC,GAAM,OAAIA,EAAOC,QAAQ,IACnCtE,SAAU,SAAAlE,GAAK,OAAI,EAAKiH,gBAAgBjH,MAE5C,yBAAKyI,UAAU,sBACX,4BAAQA,UAAU,cAAcC,QAAStM,KAAK8K,oBAAqB9K,KAAK2K,aAAc,eAAgB,mBAD1G,WAGI,4BAAQ0B,UAAU,WAAWC,QAAStM,KAAKgL,WAA3C,eAHJ,WAKI,4BAAQsB,QAAStM,KAAK4J,MAAM2C,SAA5B,gB,gDA7IgB3C,EAAOI,GACnC,MAAO,CACHsB,aAAc1B,EAAM2B,SACpBrK,QAAU0I,EAAM4B,MAChBnB,WAAaT,EAAM6B,QACnBrB,UAAYR,EAAMpE,W,GAvBTyC,IAAMuE,WCIZC,EATE,SAAC,GAAD,QAAGC,YAAH,MAAQ,WAAR,EAAoBC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAAS9E,EAAnC,EAAmCA,SAAnC,OACb,2BAAOuE,UAAU,eACb,2BAAOK,KAAMA,EAAME,QAASA,EAAS9E,SAAUA,IAC/C,0BAAMuE,UAAU,cAChB,0BAAMA,UAAU,gBAAgBM,KC+HzBE,E,YAhIX,aAAc,IAAD,8BACT,+CAaJC,aAAe,SAACC,GACZ,GAAIxC,OAAOyC,MAAQzC,OAAO0C,YAAc1C,OAAO2C,UAAY3C,OAAO4C,KAAM,CACpE,IAAIC,EAAS,IAAIH,WACbI,EAAOjE,SAASkE,cAAc,oBAAoBC,MAAM,GAExDC,EAAK,eACNH,EAAKX,KAAKhL,MAFE,YAEkB2L,EAAKX,KAAKhL,MAAM,qBAE7C0L,EAAOK,OAAS,SAAUlF,GACnBiF,EAAME,gBAAgBnF,EAAMoF,OAAOC,OAAOC,MAAM,OAC/CL,EAAMM,SAAS,CACXtC,MAAQjD,EAAMoF,OAAOC,OAAOC,MAAM,MAClCE,UAAU,KAIdtI,QAAQC,IAAI,aACZ8H,EAAMQ,gBAGd,EAAKC,SAAWZ,EAChBD,EAAOc,WAAWb,IAGlBc,MAAM,mCAIVA,MAAM,oEA1CD,EA8CbC,cAAgB,WACZ,GAAmB,OAAhB,EAAKH,SAAgB,CACpB,IAAIb,EAAS,IAAIH,WACbO,EAAK,eACTJ,EAAOK,OAAS,SAAUlF,GACnBiF,EAAME,gBAAgBnF,EAAMoF,OAAOC,OAAOC,MAAM,OAC/CL,EAAMM,SAAS,CACXtC,MAAQjD,EAAMoF,OAAOC,OAAOC,MAAM,MAClCE,UAAU,IAIdP,EAAMQ,eAGdZ,EAAOc,WAAW,EAAKD,YA7DlB,EAiEbI,uBAAyB,SAACtB,GACtB,EAAKe,SAAS,CACVzD,WAAY0C,EAAGY,OAAOf,WAnEjB,EAuEb0B,sBAAwB,SAACvB,GACrB,EAAKe,SAAS,CACV1D,UAAY2C,EAAGY,OAAOf,WAzEjB,EA6Ebc,gBAAkB,SAACa,GAIf,IAHA,IAAIC,EAAc,GACdC,GAAW,EAEP5L,EAAI,EAAGA,EAAI0L,EAAUxM,OAAO,EAAGc,IAAI,CACvC,IAAI6L,EAASH,EAAU1L,GAAGtB,QAAQ,mBAAoB,IAGlDmN,EAAOhN,MAAM,SAASK,SAAW2M,EAAOhN,MAAM,SAASK,SACvDyM,GAAc,gCAAF,OAAmC3L,EAAE,EAArC,MACZ4L,GAAW,GAIXC,EAAOhN,MAAM,gBAAgBK,SAAY2M,EAAOhN,MAAM,MAAMK,OAAQ,IACpEyM,GAAc,gCAAF,OAAmC3L,EAAE,EAArC,MACZ4L,GAAW,GAIXC,EAAOhN,MAAM,gBAAgBK,SAAW2M,EAAOhN,MAAM,8BAA8BK,SACnFyM,GAAc,mDAAF,OAAsD3L,EAAE,EAAxD,MACZ4L,GAAW,GAGnB,OAAGA,IACCN,MAAMK,IACC,IArGX,EAAKxE,MAAQ,CACT+D,UAAU,EACVvC,MAAO,GACPnB,YAAa,EACbD,WAAY,GAEhB,EAAK6D,SAAW,KAChB,EAAKU,eAAiB,EACtB,EAAKC,gBAAkB,EAXd,E,sEA8GT,OACI,yBAAK5F,MAAO,CAAC6F,WAAW,GAAIC,UAAU,GAAIC,YAAY,KAClD,kBAAC,EAAD,CAAQxD,SAAUvL,KAAKgK,MAAM+D,SAAUvC,MAASxL,KAAKgK,MAAMwB,MAAOhG,MAASxF,KAAKgK,MAAMI,UAAWqB,QAASzL,KAAKgK,MAAMK,WAAYkC,QAASvM,KAAKoO,gBAC/I,2BAAO/B,UAAU,YACb,2BAAOK,KAAM,OAAO5E,SAAU9H,KAAK8M,gBAEvC,yBAAKT,UAAU,qBACX,kBAAC,EAAD,CAAUM,KAAK,mBAAmB7E,SAAU9H,KAAKqO,uBAAwBzB,QAAS5M,KAAKgK,MAAMK,aADjG,uBAGI,kBAAC,EAAD,CAAUsC,KAAK,YAAY7E,SAAU9H,KAAKsO,sBAAuB1B,QAAS5M,KAAKgK,MAAMI,kB,GAxHtFnC,IAAMuE,WCMVwC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASzN,MACvB,2DCZN0N,IAASC,OAAO,kBAAC,EAAD,MAASjG,SAASkG,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cd4c18f1.chunk.js","sourcesContent":["/* eslint-disable no-lone-blocks */\nfunction TreeUtils(){\n    // var treeString=\"empty\";\n    var TREEROOT;\n    var SPNAMES=[];\n    var initX=40;\n    var initY=15; \n    // var scaleFactor=50;\n    var spaceFactor=50\n    var heightFactor=100;\n    // var heightToSpaceFactor=1;\n    var space=0;\n    // var treeVec = [];\n    // var aString=\"\";\n    // var treePos=\"\";\n    var maxHeight=0; \n    // var value=0;\n    var scaleBar=0.0;\n\n    this.tallestTreeScale=false;\n    this.useCladogram=false;\n    this.maxNameLength=0; \n    this.circles=[];\n\n\n    /////////////////// ORIGINAL ////////////////\n    function Node(data, left, right, father){\n        this.data = data;\n        this.left = left;\n        this.right = right;\n        this.father = father;\n        this.space = 0;\n        this.height = 0; \n        this.theta = 0;\n        this.index = -99;\n        this.circle = new Circle();\n        // this.show = show;\n    }\n    // Add On circle class //\n    function Circle(){\n        this.id = 0;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    this.getMaxHeight = (noTr, treeVec) => {\n        maxHeight=0;\n        for(let y=0; y<noTr; y++){\n            let h1 = this.getTreeHeight(treeVec[y]);\n            if(h1 > maxHeight){\n                maxHeight = h1;\n            }\n        }\n    }\n\n    this.getTreeHeight = (tree) => {\n        // strip all thetas out of tree\n        var Newtree = tree.replace(/(#\\d.\\d+)([eE](\\+|-)?[0-9]+)?/g,\"\");\n        // count opening parenthese until first tip taxa is encountered\n        var p=0;\n        while(Newtree[p]===\"(\"){\n            p++;\n        }\n        // strip all leading \"(\"s out of tree\n        Newtree = Newtree.replace(/\\(+/,\"\");\n        // put elements of tree into a vector\n        var newick=Newtree.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(\\,)/g); // ([eE][-+]?[0-9]+)?) /g);\n        // get tree height\n        var blsum=0;\n        blsum += Number(newick[1]); \n        var j=0;\n        for(var k=2; k<newick.length; k++){\n            if(newick[k]===\"(\"){\n                j++;\n            }\n            else if ((newick[k]===\")\")&&(j===0)&&(p>1)) {\n                blsum += Number(newick[k+1]); p--;\n            }\n            else if ((newick[k]===\")\")&&(j>0)) {\n                j--;\n            }\n        }\n        return blsum;\n    }\n\n    this.makeEdge = (x,y,z,context) => {\n        context.lineWidth = 3;\n        context.lineJoin = 'round';\n        context.beginPath();\n        context.moveTo(x,y);\n        context.lineTo(x,z);\n        context.stroke();\n    }\n\n    this.printNames = (nameArray, context) => {\n        let currX=initX+spaceFactor;\n        let cY=initY+this.maxNameLength -12;\n\n        for (let i=0; i<nameArray.length;i++){\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            context.translate(currX,cY);\n            context.rotate(Math.PI*(3/2));\t\n            context.fillText(nameArray[i],0,0);\n            context.restore();\n\t        currX+=spaceFactor;\n        }\n    } \n\n    this.postOrder = (node,context,brLng) => {\n        if (!brLng){ // is a cladogram with no branch lengths\n            if(node === null){\n                // console.log(\"returned\");\n                return; \n            }\n            if(node.left !== null){\n                // console.log(\"going left\");\n                this.postOrder(node.left, context, false);\n            }\n            if(node.right !== null){\n                // console.log(\"goin right\");\n                this.postOrder(node.right, context, false);\n            } \n            if((node.left == null)&&(node.right == null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                this.printTheta( node.space+initX, node.height*heightFactor+initY+this.maxNameLength, node, context );\n                this.makeEdge(node.space+initX, node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n            }\n            else {\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                if(node.father != null){\n                    // var y1=node.right.height*heightFactor+initY+maxNameLength;\n                    // var y2=node.height*heightFactor+initY+maxNameLength;\n                    // this.makeEdge(node.space+initX,node.height*heightFactor+initY+this.maxNameLength,node.theta,context);\n                    this.printTheta(node.space+initX,node.height*heightFactor+initY+this.maxNameLength, node, context)\n                    this.makeEdge(node.space+initX,node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else{\n                    this.drawRootTheta(node, context, node.theta, true);\n                }\n            }\n            // this.addNodeTag(node, order, context);\n        }\n        else if(brLng){\n            if(node === null){\n                // console.log(\"returned\");\n                return;\n            }\n            if(node.left != null){\n                // console.log(\"going left\");\n                this.postOrder(node.left, context, true);\n            }\n            if(node.right != null){\n                // console.log(\"going right\");\n                this.postOrder(node.right, context, true);\n            }\n            if((node.left === null)&&(node.right === null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                // var y2=node.height*heightFactor+initY+maxNameLength;\n                // this.makeEdge(50,200,500,context);\n                // console.log(\"nodeSpace: \", node.space, \"initX: \", initX, \"initY: \", initY, \"MaxNameLen: \", this.maxNameLength, \"nodeeight: \", node.height, \"HeightFactor: \", heightFactor);\n                // this.makeEdge(264,45,450, context);\n                this.printTheta( node.space+initX, initY+this.maxNameLength, node, context, true);\n                this.makeEdge( node.space+initX, initY+this.maxNameLength, node.height*heightFactor+initY+this.maxNameLength, context);\n            }\n            else {\n                // non-tip nodes\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                // horizontal lines\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                // try printing order\n                if(node.father != null){\n                    // this.makeEdge(100,200,500,context);\n                    this.printTheta(node.space+initX, node.right.height*heightFactor+initY+this.maxNameLength, node, context );\n                    // node.space+initX,node.right.height*heightFactor+initY+this.maxNameLength,node.height*heightFactor+initY+this.maxNameLength,context\n                    this.makeEdge(node.space+initX,node.right.height*heightFactor+initY+this.maxNameLength,node.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else{\n                    this.drawRootTheta(node, context, node.theta, false);\n                }\n            }\n        }\n    }\n\n    this.drawOneTree = (value,treeVec,useCladogram,canvas,context,tallestTreeScale,hF) => {   \n        if(value < treeVec.length){\n            // 1 - make tree structure from input text \n            if(!useCladogram){\n                this.treeFromNewick(treeVec[value],true, context);\n            }\n            else{\n                this.treeFromNewick(treeVec[value],false, context);\n            }\n        \n            // 2 \n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(SPNAMES,context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n\n    this.treeFromNewick = (newickString,brLen,ctx) => {\n        var orderTag = 0;\n        if(!brLen){\n            let height = newickString.match(/(\\,)/g).length;\n            // overwrite input string \n            newickString = newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            SPNAMES = newickString.match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            let newick = newickString.match(/([A-Za-z]+)|(\\()|(\\))|(\\,)|([#]\\d+\\.\\d+)/g);\n\n            let n = new Node(\"root\", null, null, null);\n            n.height = height\n            TREEROOT = n;\n            let current = TREEROOT;\n            current.height=0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                            current.left = n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                            current = current.father;\n                            current.right=n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \")\":\n                        // back\n                            current = current.father;\n                            current.height=Math.max(current.right.height,current.left.height)+1;\n                        break;\n                    default:\n                        if(newick[pos].match(/([#]\\d+\\.\\d+)/g)){\n                            current.theta = newick[pos];\n                            current.order = orderTag;\n                        }\n                        else{\n                            current.data = newick[pos];\n                            current.height = 0;\n                        }\n                        break;\n                    }\n                orderTag+=1;\n\t        }\n\t        TREEROOT.height=Math.max(current.right.height,current.left.height)+1;\n        }\n        else if(brLen){\n            SPNAMES = newickString.replace(/(#\\d+\\.\\d+)|(\\d+\\.\\d+)/g,\"\").replace(/e-\\d+/g,\"\").replace(/:/g,\"\").match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            newickString=newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            let newick=newickString.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(\\,)|([#]\\d+\\.\\d+)/g); \n            let n = new Node(\"root\", null, null, null, null, null, null);\n            TREEROOT = n;\n            let current = TREEROOT;\n            let cumY=0.0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null, null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                        current.left = n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                        current = current.father;\n                        current.right=n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \")\":\n                        // back\n                        cumY = current.height;\n                        current = current.father;\n                        break;\n                    case \";\":\n                        // at end\n                        break;\n                    default:\n                        current.order = orderTag;\n                        if( (newick[pos].match(/(\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?/) !=null) && (newick[pos].match(/([#]\\d+\\.\\d+)/) == null) ) {\n                            current.height = parseFloat(newick[pos])+cumY;\n                        }\n                        else if(newick[pos].match(/([#]\\d+\\.\\d+)/)){\n                            current.theta = newick[pos];\n                        }\n                        else{\n                            current.data = newick[pos];\n                            cumY=0.0;\n                        }\n                        break;\n                }\n            }    \n        }\n    }\n\n    this.getMaxLenSN = (sN, context) => {\n        let mLen = 0;\n        let iD = 0;\n\n        for(let i=0; i<sN.length; i++){\n            if(sN[i].length > mLen){\n                mLen = sN[i].length;\n                iD = i;\n            }\n            context.font = \"italic bold 16px serif\";\n            this.maxNameLength=context.measureText(sN[iD]).width;\n        }\n    }\n\n    ////////////// ADD ONS ///////////////\n    //// Prinitng Theta Value ////\n    this.printTheta = (x,y,node,context,branchTip) =>{\n        if(node){\n            // console.log(node.order)\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            let X = x-70;\n            let Y = y+15;\n            context.translate(X, Y);\n            let message = node.theta.replace(/[#]/,\"\");\n            context.fillText(message,0,0);\n            context.restore();\n        }\n    } \n\n    this.drawRootTheta = (node, context, message, clado) => {\n        if(message){\n            if(!clado){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+this.maxNameLength;\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore();\n            }\n            else{\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.height*heightFactor+initY+this.maxNameLength\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore()\n            }\n        }\n        else{\n            console.log(\"bad\");\n        }\n    }\n\n    function Swap(node,InputNodeID){\n        if(node === null){\n            return;\n        }\n        if(node.index === InputNodeID){\n            if(node.left && node.right){\n                let temp = node.left;\n                node.left = node.right;\n                node.right = temp;\n            }\n        }\n        if(node.left !== null){\n            Swap(node.left, InputNodeID);\n        }\n        if(node.right !== null){ \n            Swap(node.right, InputNodeID);\n        }\n    }\n\n    //SPECIES NAME\n    this.newSpeciesOrder = (node) => {\n        var treeList =[]\n        ExtractSpeciesOrder(node,treeList);\n        return treeList;\n    }\n\n    //DISPLAY Index \n    this.displayIndex = (brLen, context) =>{\n        if(this.circles.length === 0){\n            if(TREEROOT){\n                var indexer = new Indexer();\n                EnumerateTree(TREEROOT,indexer);\n                this.DrawIndex(TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n        else{\n            if(TREEROOT){\n                this.circles =[];\n                this.DrawIndex(TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n    }\n\n    function Indexer(){\n        this.index = 0;\n        this.assign = (node) =>{\n            node.index = this.index;\n            node.circle.id = this.index;\n            this.index++;\n        }\n    }\n\n    function ExtractSpeciesOrder(tNode, newickSt){\n        // Call after altering a tree \n        // Recursively traverse tree to get new Species name order\n        if(tNode === null){\n            return;\n        }\n        var currNode = tNode;\n        if(currNode.left !== null){\n            ExtractSpeciesOrder(currNode.left, newickSt);\n        }\n        if(currNode.right !== null){\n            ExtractSpeciesOrder(currNode.right, newickSt);\n        }\n        if((currNode.left === null) && (currNode.right === null)){\n            newickSt.push(tNode.data);\n        }\n    }\n\n    function EnumerateTree(node,indexer){\n        if(node === null){\n            return;\n        }\n        if((node.left !== null)&& (node.right!==null)){\n            indexer.assign(node);\n        }\n\n        if(node.left !== null){\n            EnumerateTree(node.left, indexer);\n        }\n        \n        if(node.right !== null){\n            EnumerateTree(node.right, indexer)\n        }\n    }\n\n    this.DrawIndex = (node, brLen, context, maxNameLength) => {\n        if(node === null){\n            return;\n        }\n        if((node.left !== null) && (node.right!==null)){\n            // print index\n            if(brLen){\n                // console.log(node.space+initX, node.right.height*heightFactor+initY,maxNameLength);\n                // console.log(node.right.height, heightFactor,initY,maxNameLength);\n                this.drawIndexToCanvas( node.space+initX, node.right.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }else{\n                // console.log(node.space+initX, node.height*heightFactor+initY,maxNameLength);\n                this.drawIndexToCanvas( node.space+initX, node.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }\n        }\n        if(node.left !== null){ \n            this.DrawIndex(node.left, brLen, context, maxNameLength);\n        }\n        if(node.right !== null){\n            this.DrawIndex(node.right, brLen, context, maxNameLength);\n        }\n    }\n\n    //called to generate an circle object for each potential node flip\n    this.createCircle = (x, y, radius, id) => {\n        this.circles.push({x: x, y: y, radius: radius, id: id});\n    }\n\n    this.drawIndexToCanvas = (x, y, MaxNameLen ,node, context, brLen) => {\n        var radius = 15;\n        if(node.father === null){\n            if(brLen){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+MaxNameLen;\n                \n                context.save();\n                context.beginPath();\n                this.createCircle(x, y, radius, node.index);\n                context.arc(x, y, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n                context.restore();\n\n                context.save();\n                context.translate(x-4, y);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n            else{\n                let x = (node.left.space+node.right.space)/2+initX-50;\n                let y = node.height*heightFactor+initY+MaxNameLen+10\n\n                context.save();\n                context.beginPath();\n                this.createCircle(x, y, radius, node.index);\n                context.arc(x, y, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n                context.restore();\n\n                context.save();\n                context.translate(x-4, y);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n        }\n        else{\n            context.textAlign='start';\n            context.textBaseline='middle';\n            \n            context.save();\n            context.beginPath();\n            this.createCircle(x, y+30, radius, node.index);\n            context.arc(x, y+30, radius, 0, 2*Math.PI, false);\n            context.fillStyle = '#4a4a4a';\n            context.fill();\n            context.lineWidth = 3;\n            context.strokeStyle = '#000000';\n            context.stroke();\n            context.restore()\n\n            context.save();\n            context.translate(x-4, y+30);\n            context.fillStyle = '#ffffff';\n            context.fillText(node.index, 0, 0);\n            context.restore();\n        }\n    }\n\n    this.swapNodes = (nodeId, useCladogram, canvas, context, tallestTreeScale, hF) => {\n        if(TREEROOT){\n            Swap(TREEROOT,nodeId);\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            // if(value==0)\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(this.newSpeciesOrder(TREEROOT) ,context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n    \n    this.redrawCurrentTree = (useCladogram, canvas, context, tallestTreeScale, hF) => {\n        if(TREEROOT){\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.font = \"italic bold 16px serif\";\n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(this.newSpeciesOrder(TREEROOT) ,context);\n            if(!useCladogram){\n                this.postOrder(TREEROOT,context,true);\n            }\n            else{\n                this.postOrder(TREEROOT,context,false);\n            }\n        }\n    }\n}\n    \nmodule.exports = TreeUtils;","import React from 'react';\nimport styled from 'styled-components';\n\nconst SliderHeader = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst StyledSlider = styled.div`\n  position: relative;\n  border-radius: 3px;\n  background: #dddddd;\n  height: 15px;\n`;\n\nconst StyledThumb = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 3px;\n  position: relative;\n  top: -3px;\n  opacity: 0.5;\n  background: #33ff99;\n  cursor: pointer;\n`;\n\n// SORECE : https://www.robinwieruch.de/react-slider \n\nconst getPercentage = (current, max) => (100 * current) / max;\n\nconst getValue = (percentage, max) => (max / 100) * percentage;\n\nconst getLeft = (percentage) => `calc(${percentage}% - 5px)`;\n\nconst Slider = ({\n  initial,\n  max,\n  onChange,\n}) => {\n\n  const initialPercentage = getPercentage(initial, max);\n\n  const sliderRef = React.useRef();\n  const thumbRef = React.useRef();\n  const currentRef = React.useRef();\n\n  const diff = React.useRef(null);\n\n  const handleMouseMove = event => {\n    let newX =\n      event.clientX -\n      diff.current -\n      sliderRef.current.getBoundingClientRect().left;\n\n    const end =\n      sliderRef.current.offsetWidth - thumbRef.current.offsetWidth;\n\n    const start = 0;\n\n    if (newX < start) {\n      newX = 0;\n    }\n\n    if (newX > end) {\n      newX = end;\n    }\n\n    const newPercentage = getPercentage(newX, end);\n    const newValue = getValue(newPercentage, max);\n\n    thumbRef.current.style.left = getLeft(Math.round(newPercentage));\n    currentRef.current.textContent = Math.round(newValue);\n\n    onChange(newValue);\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener('mouseup', handleMouseUp);\n    document.removeEventListener('mousemove', handleMouseMove);\n  };\n\n  const handleMouseDown = event => {\n    diff.current =\n      event.clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  return (\n    <>\n      <SliderHeader>\n        <strong ref={currentRef}>{initial}</strong>\n        &nbsp;/&nbsp;\n        {max}\n      </SliderHeader>\n      <StyledSlider ref={sliderRef}>\n        <StyledThumb\n          style={{ left: getLeft(initialPercentage) }}\n          ref={thumbRef}\n          onMouseDown={handleMouseDown}\n        />\n      </StyledSlider>\n    </>\n  );\n};\n\nexport default Slider;","import React from 'react'\nimport Slider from './Slider';\nimport jsPDF from 'jspdf';\n// import TreeUtils from '../libs/treeUtils'\n\nvar TreeUtils = require('../libs/treeUtils');\n\nclass Canvas extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            receivedData : this.props.received,\n            treeVec : this.props.trees,\n            tallestTreeScale : false,\n            useCladogram : false,\n            maxNameLength : 0,\n            RelScaling : this.props.relscal,\n            Cladogram : this.props.clado,\n            updateMe: true\n        };\n        this.currentTree = 0;\n        this.utils = new TreeUtils(); // make a global \n        this.DisplayIndex = false;\n    }\n    // update local state from props changes \n    static getDerivedStateFromProps(props, state) {\n        return {\n            receivedData: props.received, \n            treeVec : props.trees, // already split by \"/n\"\n            RelScaling : props.relscal,\n            Cladogram : props.clado,\n        };\n    }\n\n    componentDidMount(){\n        this.canvas = this.refs.canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.ctx.save();\n        this.ctx.font =\"italic 25px serif\";\n        this.ctx.fillText(\"Please select input file\", (this.canvas.width-350)/2 , this.canvas.height/2);\n        this.ctx.restore();\n        // resize\n        window.addEventListener('resize', this.onWindowResize, false); \n        this.canvas.addEventListener('click', (e)=> {\n            if(this.utils.circles.length > 0){\n                const pos = {\n                    x: e.clientX-this.ctx.canvas.offsetLeft,\n                    y: e.clientY-this.ctx.canvas.offsetTop\n                }\n                this.utils.circles.forEach( circle => {\n                    if(this.IntersectWithCircle(pos, circle)){\n                        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n                        this.utils.swapNodes(circle.id, this.state.Cladogram, this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n                        if(this.DisplayIndex){\n                            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n                        }\n                    }\n                });\n            }\n        });\n        // get init state for utils global scale \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n    }\n\n    IntersectWithCircle = (pos, circle) => {\n        return Math.pow(pos.x-circle.x,2)+Math.pow(pos.y-circle.y,2) < Math.pow(circle.radius,2); \n    }\n    \n    // called everytime there is a change to state -> triggered by getDerivedStates -> triggered by any relative prop changes\n    componentDidUpdate(){\n        if(this.state.receivedData === true){\n            this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n            this.init();\n        }\n\n        if(this.DisplayIndex){\n            this.DisplayIndex = !this.DisplayIndex;\n            this.utils.circles =[];\n        }\n\n        // update utils gloabl vars -> maybe there is a ore elegant way to do this \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n    }\n\n    // Will only be called when we receive new data \n    init = () => {\n        if(this.state.treeVec[this.state.treeVec.length-2].match(\";\") === null){\n            this.treeVec.pop();\n        }\n        // Draw first tree  \n        let noTr = this.state.treeVec.length-2;\n        this.utils.getMaxHeight(noTr, this.state.treeVec);\n        this.utils.drawOneTree(this.currentTree,this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    onWindowResize = () => {\n        this.ctx.canvas.width = window.innerWidth;\n        this.ctx.canvas.height = window.innerHeight*0.8;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        // need function to redraw tree instead\n        this.utils.redrawCurrentTree(this.state.Cladogram,this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n        }\n    }\n    // NOTE: hF = this.ctx.height*0.9-this.maxNameLength\n    slideToNextTree = (i) => {\n        this.DisplayIndex = false;\n        let index = Math.round(i);\n        this.currentTree = index;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        this.utils.drawOneTree(index, this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    toggleIndexDisplay = () => {\n        this.utils.circles = [];\n        this.DisplayIndex = !this.DisplayIndex;\n        // this.setState({updateMe:true});\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        // this.utils.drawOneTree(this.currentTree,this.state.treeVec, this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        this.utils.redrawCurrentTree(this.state.Cladogram,this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n        }\n    }\n\n    runDisplayIndex = (clado, relscale, context) => {\n        if(clado){\n            this.utils.displayIndex(false, context);\n        }\n        else if(relscale){\n            this.utils.displayIndex(true, context);\n        }\n        else{\n            this.utils.displayIndex(true, context);\n        }\n    }\n\n    saveAsPDF = () => {\n        // clear node circles from canvas \n        if(this.DisplayIndex){\n            this.toggleIndexDisplay();\n        }\n        var imgData = this.canvas.toDataURL();\n        var pdf = new jsPDF();\n        pdf.addImage(imgData, 'JPEG', 10, -145, 300, 150, null, null, -90);\n        pdf.save(\"download.pdf\");\n    }\n\n    render(){\n        return(\n            <div>\n                <canvas ref=\"canvas\" width={window.innerWidth} height={(window.innerHeight*0.8)} />\n                <Slider\n                    initial={0}\n                    max={this.state.treeVec.length} // use length of vector \n                    formatFn={number => number.toFixed(2)}\n                    onChange={value => this.slideToNextTree(value)} // round value to get index for treeVect\n                />\n                <div className=\"display-save-group\">\n                    <button className=\"display-btn\" onClick={this.toggleIndexDisplay}>{this.DisplayIndex? \"Hide Node ID\": \"Display Node ID\"}</button>\n                    &nbsp;&nbsp;\n                    <button className=\"save-btn\" onClick={this.saveAsPDF}>Save as PDF</button>\n                    &nbsp;&nbsp;\n                    <button onClick={this.props.refresh}>Refresh</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Canvas;","import React from 'react'\n\nconst Checkbox = ({ type='checkbox', text, checked, onChange }) => (\n    <label className=\"check-label\">\n        <input type={type} checked={checked} onChange={onChange}/>\n        <span className=\"checkmark\"></span>\n        <span className=\"check-custom\">{text}</span>\n    </label>\n)\n\n\nexport default Checkbox; ","import React from 'react'\nimport Canvas from './Canvas'\nimport Checkbox from './Checkbox'\n\nclass Home extends React.Component{\n    constructor(){\n        super()\n\n        this.state = {\n            uploaded: false, \n            trees: [],\n            RelScaling : true,\n            Cladogram : false,\n        }\n        this.CurrFile = null;\n        this.currFileLength = 0;\n        this.previousFileLen = 0;\n    }\n\n    handleUpload = (ev) => {\n        if( window.File && window.FileReader && window.FileList && window.Blob ){\n            var reader = new FileReader();\n            var file = document.querySelector('input[type=file]').files[0];\n            var textFile = /text.*/;\n            var scope = this; // for anonymous funtion below that is not in the class component \n            if(file.type.match(textFile) && !file.type.match(/text\\/javascript/)) // .js file is also considered a text file (try console.log(file.type));\n            {\n                reader.onload = function (event) {\n                    if(scope.varifyInputFile(event.target.result.split(\"\\n\"))){\n                        scope.setState({\n                            trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                            uploaded: true                              // switch upload status -> also triggers the actual drawing of the tree\n                        });\n                    }\n                    else{\n                        console.log(\"bad input\");\n                        scope.forceUpdate();\n                    }\n                }\n                this.CurrFile = file; // for refresh purposes\n                reader.readAsText(file);\n            }\n            else {\n                alert(\"Upload was not a .txt file\");\n            }\n        }\n        else {\n            alert(\"Your browswer is too old for HTML5 file uploads. Please update.\");\n        }\n    }\n\n    handleRefresh = () =>{\n        if(this.CurrFile!==null){\n            var reader = new FileReader(); \n            var scope = this;\n            reader.onload = function (event) {\n                if(scope.varifyInputFile(event.target.result.split(\"\\n\"))){\n                    scope.setState({\n                        trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                        uploaded: true                              // switch upload status -> also triggers the actual drawing of the tree\n                    });\n                }\n                else{\n                    scope.forceUpdate();\n                }\n            }\n            reader.readAsText(this.CurrFile);\n        }\n    }\n\n    handleRelScalingChange = (ev)=> {\n        this.setState({\n            RelScaling: ev.target.checked\n        });\n    }\n\n    handleCladogramChange = (ev) => {\n        this.setState({\n            Cladogram : ev.target.checked\n        });\n    }\n\n    varifyInputFile = (inputVect) => {\n        let returnString =\"\";\n        let badInput = false;\n\n        for(let i = 0; i < inputVect.length-1; i++){\n            let string = inputVect[i].replace(/(\\s[#]\\d+\\.\\d+)/g, \"\");\n\n            //1. paranthesis test \n            if( string.match(/(\\()/g).length !== string.match(/(\\))/g).length ){\n                returnString+=(`Mismatch parenthesis at line ${i+1}\\n`);\n                badInput = true;\n            }\n            \n            //2. comma to species name check\n            if( string.match(/(?=\\D)(\\w+)/g).length !== (string.match(/,/g).length +1) ){\n                returnString+=(`Incorrect tree depth at line ${i+1}\\n`);\n                badInput = true;\n            }\n\n            //3. species name and branchlength test \n            if( string.match(/(?=\\D)(\\w+)/g).length !== string.match(/(?=\\D)(\\w+)(\\:\\s\\d+\\.\\d+)/g).length ){\n                returnString+=(`Mismatch number of species and brlength at line ${i+1}\\n`);\n                badInput = true;\n            }\n        }\n        if(badInput){\n            alert(returnString);\n            return false;\n        }\n        return true;\n    }\n\n    render(){\n        return(\n            <div style={{marginLeft:30, marginTop:15, marginRight:30}}>\n                <Canvas received={this.state.uploaded} trees = {this.state.trees} clado = {this.state.Cladogram} relscal={this.state.RelScaling} refresh={this.handleRefresh}/>\n                <label className=\"file-inp\">\n                    <input type ='file' onChange={this.handleUpload} />\n                </label>\n                <div className=\"scaling-btn-group\">\n                    <Checkbox text=\"Relative Scaling\" onChange={this.handleRelScalingChange} checked={this.state.RelScaling} />\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <Checkbox text=\"Cladogram\" onChange={this.handleCladogramChange} checked={this.state.Cladogram} />\n                </div>\n                \n            </div>\n        )\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}